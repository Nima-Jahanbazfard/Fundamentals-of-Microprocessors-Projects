
AVRASM ver. 2.1.30  C:\Users\nima8\Desktop\tamrin1\Debug\List\tamrin1.asm Thu Dec 21 13:19:58 2023

C:\Users\nima8\Desktop\tamrin1\Debug\List\tamrin1.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\nima8\Desktop\tamrin1\Debug\List\tamrin1.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\Users\nima8\Desktop\tamrin1\Debug\List\tamrin1.asm(1090): warning: Register r6 already defined by the .DEF directive
C:\Users\nima8\Desktop\tamrin1\Debug\List\tamrin1.asm(1091): warning: Register r7 already defined by the .DEF directive
C:\Users\nima8\Desktop\tamrin1\Debug\List\tamrin1.asm(1092): warning: Register r8 already defined by the .DEF directive
C:\Users\nima8\Desktop\tamrin1\Debug\List\tamrin1.asm(1093): warning: Register r9 already defined by the .DEF directive
C:\Users\nima8\Desktop\tamrin1\Debug\List\tamrin1.asm(1094): warning: Register r10 already defined by the .DEF directive
C:\Users\nima8\Desktop\tamrin1\Debug\List\tamrin1.asm(1095): warning: Register r11 already defined by the .DEF directive
C:\Users\nima8\Desktop\tamrin1\Debug\List\tamrin1.asm(1096): warning: Register r13 already defined by the .DEF directive
C:\Users\nima8\Desktop\tamrin1\Debug\List\tamrin1.asm(1097): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _tenth=R4
                 	.DEF _tenth_msb=R5
                 	.DEF _second=R6
                 	.DEF _second_msb=R7
                 	.DEF _minute=R8
                 	.DEF _minute_msb=R9
                 	.DEF _hour=R10
                 	.DEF _hour_msb=R11
                 	.DEF __lcd_x=R13
                 	.DEF __lcd_y=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0047 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0074 	JMP  _timer0_comp_isr
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 0000      	.DB  0x0,0x0,0x0,0x0
000035 0000
000036 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x0:
000037 6425
000038 203a
000039 6425
00003a 203a      	.DB  0x25,0x64,0x3A,0x20,0x25,0x64,0x3A,0x20
00003b 6425
00003c 203a
00003d 6425
C:\Users\nima8\Desktop\tamrin1\Debug\List\tamrin1.asm(1141): warning: .cseg .db misalignment - padding zero byte
00003e 0000      	.DB  0x25,0x64,0x3A,0x20,0x25,0x64,0x0
                 _0x2000003:
00003f c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000040 0008      	.DW  0x08
000041 0004      	.DW  0x04
000042 0066      	.DW  __REG_VARS*2
                 
000043 0002      	.DW  0x02
000044 0274      	.DW  __base_y_G100
000045 007e      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000046 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000047 94f8      	CLI
000048 27ee      	CLR  R30
000049 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00004a e0f1      	LDI  R31,1
00004b bffb      	OUT  GICR,R31
00004c bfeb      	OUT  GICR,R30
00004d bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00004e e08d      	LDI  R24,(14-2)+1
00004f e0a2      	LDI  R26,2
000050 27bb      	CLR  R27
                 __CLEAR_REG:
000051 93ed      	ST   X+,R30
000052 958a      	DEC  R24
000053 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000054 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000055 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000056 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000057 93ed      	ST   X+,R30
000058 9701      	SBIW R24,1
000059 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00005a e8e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00005b e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00005c 9185      	LPM  R24,Z+
00005d 9195      	LPM  R25,Z+
00005e 9700      	SBIW R24,0
00005f f061      	BREQ __GLOBAL_INI_END
000060 91a5      	LPM  R26,Z+
000061 91b5      	LPM  R27,Z+
000062 9005      	LPM  R0,Z+
000063 9015      	LPM  R1,Z+
000064 01bf      	MOVW R22,R30
000065 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000066 9005      	LPM  R0,Z+
000067 920d      	ST   X+,R0
000068 9701      	SBIW R24,1
000069 f7e1      	BRNE __GLOBAL_INI_LOOP
00006a 01fb      	MOVW R30,R22
00006b cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00006c e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00006d bfed      	OUT  SPL,R30
00006e e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00006f bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000070 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000071 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000072 940c 00ba 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;
                 ;int tenth=0, second=0, minute=0, hour=0;
                 ;char st[20];
                 ;interrupt [TIM0_COMP] void timer0_comp_isr(void)
                 ; 0000 0009 {
                 
                 	.CSEG
                 _timer0_comp_isr:
                 ; .FSTART _timer0_comp_isr
000074 920a      	ST   -Y,R0
000075 921a      	ST   -Y,R1
000076 939a      	ST   -Y,R25
000077 93aa      	ST   -Y,R26
000078 93ba      	ST   -Y,R27
000079 93ea      	ST   -Y,R30
00007a 93fa      	ST   -Y,R31
00007b b7ef      	IN   R30,SREG
00007c 93ea      	ST   -Y,R30
                 ; 0000 000A tenth++;
00007d 01f2      	MOVW R30,R4
00007e 9631      	ADIW R30,1
00007f 012f      	MOVW R4,R30
                 ; 0000 000B     if (tenth==10)
000080 e0ea      	LDI  R30,LOW(10)
000081 e0f0      	LDI  R31,HIGH(10)
000082 15e4      	CP   R30,R4
000083 05f5      	CPC  R31,R5
000084 f559      	BRNE _0x3
                 ; 0000 000C     {second++; tenth=0;PORTB=0x00;
000085 01f3      	MOVW R30,R6
000086 9631      	ADIW R30,1
000087 013f      	MOVW R6,R30
000088 2444      	CLR  R4
000089 2455      	CLR  R5
00008a e0e0      	LDI  R30,LOW(0)
00008b bbe8      	OUT  0x18,R30
                 ; 0000 000D      if(second%5==0){
00008c 01d3      	MOVW R26,R6
00008d e0e5      	LDI  R30,LOW(5)
00008e e0f0      	LDI  R31,HIGH(5)
00008f 940e 03a7 	CALL __MODW21
000091 9730      	SBIW R30,0
000092 f411      	BRNE _0x4
                 ; 0000 000E       PORTB=0x01;
000093 e0e1      	LDI  R30,LOW(1)
000094 bbe8      	OUT  0x18,R30
                 ; 0000 000F        }
                 ; 0000 0010 
                 ; 0000 0011         if (second==60)
                 _0x4:
000095 e3ec      	LDI  R30,LOW(60)
000096 e0f0      	LDI  R31,HIGH(60)
000097 15e6      	CP   R30,R6
000098 05f7      	CPC  R31,R7
000099 f4b1      	BRNE _0x5
                 ; 0000 0012         {second=0;
00009a 2466      	CLR  R6
00009b 2477      	CLR  R7
                 ; 0000 0013         minute++;
00009c 01f4      	MOVW R30,R8
00009d 9631      	ADIW R30,1
00009e 014f      	MOVW R8,R30
                 ; 0000 0014             if (minute==60)
00009f e3ec      	LDI  R30,LOW(60)
0000a0 e0f0      	LDI  R31,HIGH(60)
0000a1 15e8      	CP   R30,R8
0000a2 05f9      	CPC  R31,R9
0000a3 f461      	BRNE _0x6
                 ; 0000 0015             {minute=0;
0000a4 2488      	CLR  R8
0000a5 2499      	CLR  R9
                 ; 0000 0016             hour++;
0000a6 01f5      	MOVW R30,R10
0000a7 9631      	ADIW R30,1
0000a8 015f      	MOVW R10,R30
                 ; 0000 0017                 if (hour==24)
0000a9 e1e8      	LDI  R30,LOW(24)
0000aa e0f0      	LDI  R31,HIGH(24)
0000ab 15ea      	CP   R30,R10
0000ac 05fb      	CPC  R31,R11
0000ad f411      	BRNE _0x7
                 ; 0000 0018                 {hour=0;
0000ae 24aa      	CLR  R10
0000af 24bb      	CLR  R11
                 ; 0000 0019                 }
                 ; 0000 001A             }
                 _0x7:
                 ; 0000 001B         }
                 _0x6:
                 ; 0000 001C     }
                 _0x5:
                 ; 0000 001D }
                 _0x3:
0000b0 91e9      	LD   R30,Y+
0000b1 bfef      	OUT  SREG,R30
0000b2 91f9      	LD   R31,Y+
0000b3 91e9      	LD   R30,Y+
0000b4 91b9      	LD   R27,Y+
0000b5 91a9      	LD   R26,Y+
0000b6 9199      	LD   R25,Y+
0000b7 9019      	LD   R1,Y+
0000b8 9009      	LD   R0,Y+
0000b9 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0020 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0021 // Declare your local variables here
                 ; 0000 0022 
                 ; 0000 0023 // Input/Output Ports initialization
                 ; 0000 0024 // Port A initialization
                 ; 0000 0025 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=In Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0026 DDRA=(1<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (0<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
0000ba efe7      	LDI  R30,LOW(247)
0000bb bbea      	OUT  0x1A,R30
                 ; 0000 0027 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=T Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0028 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0000bc e0e0      	LDI  R30,LOW(0)
0000bd bbeb      	OUT  0x1B,R30
                 ; 0000 0029 
                 ; 0000 002A // Port B initialization
                 ; 0000 002B // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 002C DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (1<<DDB0);
0000be e0e1      	LDI  R30,LOW(1)
0000bf bbe7      	OUT  0x17,R30
                 ; 0000 002D // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 002E PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000c0 e0e0      	LDI  R30,LOW(0)
0000c1 bbe8      	OUT  0x18,R30
                 ; 0000 002F 
                 ; 0000 0030 // Port C initialization
                 ; 0000 0031 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0032 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
0000c2 bbe4      	OUT  0x14,R30
                 ; 0000 0033 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0034 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000c3 bbe5      	OUT  0x15,R30
                 ; 0000 0035 
                 ; 0000 0036 // Port D initialization
                 ; 0000 0037 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0038 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
0000c4 bbe1      	OUT  0x11,R30
                 ; 0000 0039 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 003A PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000c5 bbe2      	OUT  0x12,R30
                 ; 0000 003B 
                 ; 0000 003C // Timer/Counter 0 initialization
                 ; 0000 003D // Clock source: System Clock
                 ; 0000 003E // Clock value: 0.977 kHz
                 ; 0000 003F // Mode: CTC top=OCR0
                 ; 0000 0040 // OC0 output: Disconnected
                 ; 0000 0041 // Timer Period: 99.328 ms
                 ; 0000 0042 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (1<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
0000c6 e0ed      	LDI  R30,LOW(13)
0000c7 bfe3      	OUT  0x33,R30
                 ; 0000 0043 TCNT0=0x00;
0000c8 e0e0      	LDI  R30,LOW(0)
0000c9 bfe2      	OUT  0x32,R30
                 ; 0000 0044 OCR0=0x60;
0000ca e6e0      	LDI  R30,LOW(96)
0000cb bfec      	OUT  0x3C,R30
                 ; 0000 0045 
                 ; 0000 0046 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0047 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (1<<OCIE0) | (0<<TOIE0);
0000cc e0e2      	LDI  R30,LOW(2)
0000cd bfe9      	OUT  0x39,R30
                 ; 0000 0048 
                 ; 0000 0049 // Alphanumeric LCD initialization
                 ; 0000 004A // Connections are specified in the
                 ; 0000 004B // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 004C // RS - PORTA Bit 0
                 ; 0000 004D // RD - PORTA Bit 1
                 ; 0000 004E // EN - PORTA Bit 2
                 ; 0000 004F // D4 - PORTA Bit 4
                 ; 0000 0050 // D5 - PORTA Bit 5
                 ; 0000 0051 // D6 - PORTA Bit 6
                 ; 0000 0052 // D7 - PORTA Bit 7
                 ; 0000 0053 // Characters/line: 8
                 ; 0000 0054 lcd_init(16);
0000ce e1a0      	LDI  R26,LOW(16)
0000cf d080      	RCALL _lcd_init
                 ; 0000 0055 
                 ; 0000 0056 // Global enable interrupts
                 ; 0000 0057 #asm("sei")
0000d0 9478      	sei
                 ; 0000 0058 
                 ; 0000 0059 while (1)
                 _0x8:
                 ; 0000 005A       {
                 ; 0000 005B       sprintf(st, "%d: %d: %d: %d", hour, minute, second, tenth);
0000d1 e6e0      	LDI  R30,LOW(_st)
0000d2 e0f2      	LDI  R31,HIGH(_st)
0000d3 93fa      	ST   -Y,R31
0000d4 93ea      	ST   -Y,R30
                +
0000d5 e6ee     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0000d6 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0000d7 93fa      	ST   -Y,R31
0000d8 93ea      	ST   -Y,R30
0000d9 01f5      	MOVW R30,R10
0000da 940e 033f 	CALL SUBOPT_0x0
0000dc 01f4      	MOVW R30,R8
0000dd 940e 033f 	CALL SUBOPT_0x0
0000df 01f3      	MOVW R30,R6
0000e0 940e 033f 	CALL SUBOPT_0x0
0000e2 01f2      	MOVW R30,R4
0000e3 940e 033f 	CALL SUBOPT_0x0
0000e5 e180      	LDI  R24,16
0000e6 940e 02f2 	CALL _sprintf
0000e8 9664      	ADIW R28,20
                 ; 0000 005C       lcd_clear();
0000e9 d032      	RCALL _lcd_clear
                 ; 0000 005D       lcd_puts(st);
0000ea e6a0      	LDI  R26,LOW(_st)
0000eb e0b2      	LDI  R27,HIGH(_st)
0000ec d052      	RCALL _lcd_puts
                 ; 0000 005E       }
0000ed cfe3      	RJMP _0x8
                 ; 0000 005F }
                 _0xB:
0000ee cfff      	RJMP _0xB
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0000ef 93aa      	ST   -Y,R26
0000f0 b3eb      	IN   R30,0x1B
0000f1 70ef      	ANDI R30,LOW(0xF)
0000f2 2fae      	MOV  R26,R30
0000f3 81e8      	LD   R30,Y
0000f4 7fe0      	ANDI R30,LOW(0xF0)
0000f5 2bea      	OR   R30,R26
0000f6 bbeb      	OUT  0x1B,R30
                +
0000f7 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0000f8 958a     +DEC R24
0000f9 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0000fa 9ada      	SBI  0x1B,2
                +
0000fb e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0000fc 958a     +DEC R24
0000fd f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0000fe 98da      	CBI  0x1B,2
                +
0000ff e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000100 958a     +DEC R24
000101 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000102 c079      	RJMP _0x2080002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000103 93aa      	ST   -Y,R26
000104 81a8      	LD   R26,Y
000105 dfe9      	RCALL __lcd_write_nibble_G100
000106 81e8          ld    r30,y
000107 95e2          swap  r30
000108 83e8          st    y,r30
000109 81a8      	LD   R26,Y
00010a dfe4      	RCALL __lcd_write_nibble_G100
                +
00010b e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
00010c 958a     +DEC R24
00010d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
00010e c06d      	RJMP _0x2080002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00010f 93aa      	ST   -Y,R26
000110 81e8      	LD   R30,Y
000111 e0f0      	LDI  R31,0
000112 58ec      	SUBI R30,LOW(-__base_y_G100)
000113 4ffd      	SBCI R31,HIGH(-__base_y_G100)
000114 81e0      	LD   R30,Z
000115 81a9      	LDD  R26,Y+1
000116 0fae      	ADD  R26,R30
000117 dfeb      	RCALL __lcd_write_data
000118 80d9      	LDD  R13,Y+1
000119 80c8      	LDD  R12,Y+0
00011a 9622      	ADIW R28,2
00011b 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00011c e0a2      	LDI  R26,LOW(2)
00011d 940e 0344 	CALL SUBOPT_0x1
00011f e0ac      	LDI  R26,LOW(12)
000120 dfe2      	RCALL __lcd_write_data
000121 e0a1      	LDI  R26,LOW(1)
000122 940e 0344 	CALL SUBOPT_0x1
000124 e0e0      	LDI  R30,LOW(0)
000125 2ece      	MOV  R12,R30
000126 2ede      	MOV  R13,R30
000127 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000128 93aa      	ST   -Y,R26
000129 81a8      	LD   R26,Y
00012a 30aa      	CPI  R26,LOW(0xA)
00012b f021      	BREQ _0x2000005
00012c 91e0 0278 	LDS  R30,__lcd_maxx
00012e 16de      	CP   R13,R30
00012f f048      	BRLO _0x2000004
                 _0x2000005:
000130 e0e0      	LDI  R30,LOW(0)
000131 93ea      	ST   -Y,R30
000132 94c3      	INC  R12
000133 2dac      	MOV  R26,R12
000134 dfda      	RCALL _lcd_gotoxy
000135 81a8      	LD   R26,Y
000136 30aa      	CPI  R26,LOW(0xA)
000137 f409      	BRNE _0x2000007
000138 c043      	RJMP _0x2080002
                 _0x2000007:
                 _0x2000004:
000139 94d3      	INC  R13
00013a 9ad8      	SBI  0x1B,0
00013b 81a8      	LD   R26,Y
00013c dfc6      	RCALL __lcd_write_data
00013d 98d8      	CBI  0x1B,0
00013e c03d      	RJMP _0x2080002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00013f 93ba      	ST   -Y,R27
000140 93aa      	ST   -Y,R26
000141 931a      	ST   -Y,R17
                 _0x2000008:
000142 81a9      	LDD  R26,Y+1
000143 81ba      	LDD  R27,Y+1+1
000144 91ed      	LD   R30,X+
000145 83a9      	STD  Y+1,R26
000146 83ba      	STD  Y+1+1,R27
000147 2f1e      	MOV  R17,R30
000148 30e0      	CPI  R30,0
000149 f019      	BREQ _0x200000A
00014a 2fa1      	MOV  R26,R17
00014b dfdc      	RCALL _lcd_putchar
00014c cff5      	RJMP _0x2000008
                 _0x200000A:
00014d 8118      	LDD  R17,Y+0
00014e 9623      	ADIW R28,3
00014f 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000150 93aa      	ST   -Y,R26
000151 b3ea      	IN   R30,0x1A
000152 6fe0      	ORI  R30,LOW(0xF0)
000153 bbea      	OUT  0x1A,R30
000154 9ad2      	SBI  0x1A,2
000155 9ad0      	SBI  0x1A,0
000156 9ad1      	SBI  0x1A,1
000157 98da      	CBI  0x1B,2
000158 98d8      	CBI  0x1B,0
000159 98d9      	CBI  0x1B,1
00015a 81e8      	LD   R30,Y
00015b 93e0 0278 	STS  __lcd_maxx,R30
00015d 58e0      	SUBI R30,-LOW(128)
                +
00015e 93e0 0276+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000160 81e8      	LD   R30,Y
000161 54e0      	SUBI R30,-LOW(192)
                +
000162 93e0 0277+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000164 e1a4      	LDI  R26,LOW(20)
000165 e0b0      	LDI  R27,0
000166 940e 037d 	CALL _delay_ms
000168 940e 034a 	CALL SUBOPT_0x2
00016a 940e 034a 	CALL SUBOPT_0x2
00016c 940e 034a 	CALL SUBOPT_0x2
00016e e2a0      	LDI  R26,LOW(32)
00016f df7f      	RCALL __lcd_write_nibble_G100
                +
000170 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000171 958a     +DEC R24
000172 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000173 e2a8      	LDI  R26,LOW(40)
000174 df8e      	RCALL __lcd_write_data
000175 e0a4      	LDI  R26,LOW(4)
000176 df8c      	RCALL __lcd_write_data
000177 e8a5      	LDI  R26,LOW(133)
000178 df8a      	RCALL __lcd_write_data
000179 e0a6      	LDI  R26,LOW(6)
00017a df88      	RCALL __lcd_write_data
00017b dfa0      	RCALL _lcd_clear
                 _0x2080002:
00017c 9621      	ADIW R28,1
00017d 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
00017e 93ba      	ST   -Y,R27
00017f 93aa      	ST   -Y,R26
000180 931a      	ST   -Y,R17
000181 930a      	ST   -Y,R16
000182 81aa      	LDD  R26,Y+2
000183 81bb      	LDD  R27,Y+2+1
000184 9612      	ADIW R26,2
000185 940e 03b5 	CALL __GETW1P
000187 9730      	SBIW R30,0
000188 f159      	BREQ _0x2020010
000189 81aa      	LDD  R26,Y+2
00018a 81bb      	LDD  R27,Y+2+1
00018b 9614      	ADIW R26,4
00018c 940e 03b5 	CALL __GETW1P
00018e 018f      	MOVW R16,R30
00018f 9730      	SBIW R30,0
000190 f061      	BREQ _0x2020012
                +
000191 3002     +CPI R16 , LOW ( 2 )
000192 e0e0     +LDI R30 , HIGH ( 2 )
000193 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000194 f098      	BRLO _0x2020013
000195 01f8      	MOVW R30,R16
000196 9731      	SBIW R30,1
000197 018f      	MOVW R16,R30
                +
000198 81aa     +LDD R26 , Y + 2
000199 81bb     +LDD R27 , Y + 2 + 1
00019a 9614     +ADIW R26 , 4
00019b 93ed     +ST X + , R30
00019c 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
00019d 81aa      	LDD  R26,Y+2
00019e 81bb      	LDD  R27,Y+2+1
00019f 9612      	ADIW R26,2
0001a0 91ed      	LD   R30,X+
0001a1 91fd      	LD   R31,X+
0001a2 9631      	ADIW R30,1
0001a3 93fe      	ST   -X,R31
0001a4 93ee      	ST   -X,R30
0001a5 9731      	SBIW R30,1
0001a6 81ac      	LDD  R26,Y+4
0001a7 83a0      	STD  Z+0,R26
                 _0x2020013:
0001a8 81aa      	LDD  R26,Y+2
0001a9 81bb      	LDD  R27,Y+2+1
0001aa 940e 03b5 	CALL __GETW1P
0001ac 23ff      	TST  R31
0001ad f02a      	BRMI _0x2020014
0001ae 91ed      	LD   R30,X+
0001af 91fd      	LD   R31,X+
0001b0 9631      	ADIW R30,1
0001b1 93fe      	ST   -X,R31
0001b2 93ee      	ST   -X,R30
                 _0x2020014:
0001b3 c006      	RJMP _0x2020015
                 _0x2020010:
0001b4 81aa      	LDD  R26,Y+2
0001b5 81bb      	LDD  R27,Y+2+1
0001b6 efef      	LDI  R30,LOW(65535)
0001b7 efff      	LDI  R31,HIGH(65535)
0001b8 93ed      	ST   X+,R30
0001b9 93fc      	ST   X,R31
                 _0x2020015:
0001ba 8119      	LDD  R17,Y+1
0001bb 8108      	LDD  R16,Y+0
0001bc 9625      	ADIW R28,5
0001bd 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
0001be 93ba      	ST   -Y,R27
0001bf 93aa      	ST   -Y,R26
0001c0 9726      	SBIW R28,6
0001c1 940e 03c2 	CALL __SAVELOCR6
0001c3 e010      	LDI  R17,0
0001c4 85ac      	LDD  R26,Y+12
0001c5 85bd      	LDD  R27,Y+12+1
0001c6 e0e0      	LDI  R30,LOW(0)
0001c7 e0f0      	LDI  R31,HIGH(0)
0001c8 93ed      	ST   X+,R30
0001c9 93fc      	ST   X,R31
                 _0x2020016:
0001ca 89ea      	LDD  R30,Y+18
0001cb 89fb      	LDD  R31,Y+18+1
0001cc 9631      	ADIW R30,1
0001cd 8bea      	STD  Y+18,R30
0001ce 8bfb      	STD  Y+18+1,R31
0001cf 9731      	SBIW R30,1
0001d0 91e4      	LPM  R30,Z
0001d1 2f2e      	MOV  R18,R30
0001d2 30e0      	CPI  R30,0
0001d3 f409      	BRNE PC+2
0001d4 c115      	RJMP _0x2020018
0001d5 2fe1      	MOV  R30,R17
0001d6 30e0      	CPI  R30,0
0001d7 f439      	BRNE _0x202001C
0001d8 3225      	CPI  R18,37
0001d9 f411      	BRNE _0x202001D
0001da e011      	LDI  R17,LOW(1)
0001db c002      	RJMP _0x202001E
                 _0x202001D:
0001dc 940e 0351 	CALL SUBOPT_0x3
                 _0x202001E:
0001de c10a      	RJMP _0x202001B
                 _0x202001C:
0001df 30e1      	CPI  R30,LOW(0x1)
0001e0 f4a9      	BRNE _0x202001F
0001e1 3225      	CPI  R18,37
0001e2 f419      	BRNE _0x2020020
0001e3 940e 0351 	CALL SUBOPT_0x3
0001e5 c102      	RJMP _0x20200CC
                 _0x2020020:
0001e6 e012      	LDI  R17,LOW(2)
0001e7 e040      	LDI  R20,LOW(0)
0001e8 e000      	LDI  R16,LOW(0)
0001e9 322d      	CPI  R18,45
0001ea f411      	BRNE _0x2020021
0001eb e001      	LDI  R16,LOW(1)
0001ec c0fc      	RJMP _0x202001B
                 _0x2020021:
0001ed 322b      	CPI  R18,43
0001ee f411      	BRNE _0x2020022
0001ef e24b      	LDI  R20,LOW(43)
0001f0 c0f8      	RJMP _0x202001B
                 _0x2020022:
0001f1 3220      	CPI  R18,32
0001f2 f411      	BRNE _0x2020023
0001f3 e240      	LDI  R20,LOW(32)
0001f4 c0f4      	RJMP _0x202001B
                 _0x2020023:
0001f5 c002      	RJMP _0x2020024
                 _0x202001F:
0001f6 30e2      	CPI  R30,LOW(0x2)
0001f7 f439      	BRNE _0x2020025
                 _0x2020024:
0001f8 e050      	LDI  R21,LOW(0)
0001f9 e013      	LDI  R17,LOW(3)
0001fa 3320      	CPI  R18,48
0001fb f411      	BRNE _0x2020026
0001fc 6800      	ORI  R16,LOW(128)
0001fd c0eb      	RJMP _0x202001B
                 _0x2020026:
0001fe c003      	RJMP _0x2020027
                 _0x2020025:
0001ff 30e3      	CPI  R30,LOW(0x3)
000200 f009      	BREQ PC+2
000201 c0e7      	RJMP _0x202001B
                 _0x2020027:
000202 3320      	CPI  R18,48
000203 f010      	BRLO _0x202002A
000204 332a      	CPI  R18,58
000205 f008      	BRLO _0x202002B
                 _0x202002A:
000206 c007      	RJMP _0x2020029
                 _0x202002B:
000207 e0aa      	LDI  R26,LOW(10)
000208 9f5a      	MUL  R21,R26
000209 2d50      	MOV  R21,R0
00020a 2fe2      	MOV  R30,R18
00020b 53e0      	SUBI R30,LOW(48)
00020c 0f5e      	ADD  R21,R30
00020d c0db      	RJMP _0x202001B
                 _0x2020029:
00020e 2fe2      	MOV  R30,R18
00020f 36e3      	CPI  R30,LOW(0x63)
000210 f449      	BRNE _0x202002F
000211 940e 0358 	CALL SUBOPT_0x4
000213 89e8      	LDD  R30,Y+16
000214 89f9      	LDD  R31,Y+16+1
000215 81a4      	LDD  R26,Z+4
000216 93aa      	ST   -Y,R26
000217 940e 035e 	CALL SUBOPT_0x5
000219 c0ce      	RJMP _0x2020030
                 _0x202002F:
00021a 37e3      	CPI  R30,LOW(0x73)
00021b f441      	BRNE _0x2020032
00021c 940e 0358 	CALL SUBOPT_0x4
00021e 940e 0364 	CALL SUBOPT_0x6
000220 940e 0326 	CALL _strlen
000222 2f1e      	MOV  R17,R30
000223 c00a      	RJMP _0x2020033
                 _0x2020032:
000224 37e0      	CPI  R30,LOW(0x70)
000225 f461      	BRNE _0x2020035
000226 940e 0358 	CALL SUBOPT_0x4
000228 940e 0364 	CALL SUBOPT_0x6
00022a 940e 0332 	CALL _strlenf
00022c 2f1e      	MOV  R17,R30
00022d 6008      	ORI  R16,LOW(8)
                 _0x2020033:
00022e 6002      	ORI  R16,LOW(2)
00022f 770f      	ANDI R16,LOW(127)
000230 e030      	LDI  R19,LOW(0)
000231 c034      	RJMP _0x2020036
                 _0x2020035:
000232 36e4      	CPI  R30,LOW(0x64)
000233 f011      	BREQ _0x2020039
000234 36e9      	CPI  R30,LOW(0x69)
000235 f411      	BRNE _0x202003A
                 _0x2020039:
000236 6004      	ORI  R16,LOW(4)
000237 c002      	RJMP _0x202003B
                 _0x202003A:
000238 37e5      	CPI  R30,LOW(0x75)
000239 f431      	BRNE _0x202003C
                 _0x202003B:
00023a e5e4      	LDI  R30,LOW(_tbl10_G101*2)
00023b e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
00023c 83ee      	STD  Y+6,R30
00023d 83ff      	STD  Y+6+1,R31
00023e e015      	LDI  R17,LOW(5)
00023f c00c      	RJMP _0x202003D
                 _0x202003C:
000240 35e8      	CPI  R30,LOW(0x58)
000241 f411      	BRNE _0x202003F
000242 6008      	ORI  R16,LOW(8)
000243 c003      	RJMP _0x2020040
                 _0x202003F:
000244 37e8      	CPI  R30,LOW(0x78)
000245 f009      	BREQ PC+2
000246 c0a1      	RJMP _0x2020071
                 _0x2020040:
000247 e5ee      	LDI  R30,LOW(_tbl16_G101*2)
000248 e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
000249 83ee      	STD  Y+6,R30
00024a 83ff      	STD  Y+6+1,R31
00024b e014      	LDI  R17,LOW(4)
                 _0x202003D:
00024c ff02      	SBRS R16,2
00024d c014      	RJMP _0x2020042
00024e 940e 0358 	CALL SUBOPT_0x4
000250 940e 036e 	CALL SUBOPT_0x7
000252 85ab      	LDD  R26,Y+11
000253 23aa      	TST  R26
000254 f43a      	BRPL _0x2020043
000255 85ea      	LDD  R30,Y+10
000256 85fb      	LDD  R31,Y+10+1
000257 940e 038b 	CALL __ANEGW1
000259 87ea      	STD  Y+10,R30
00025a 87fb      	STD  Y+10+1,R31
00025b e24d      	LDI  R20,LOW(45)
                 _0x2020043:
00025c 3040      	CPI  R20,0
00025d f011      	BREQ _0x2020044
00025e 5f1f      	SUBI R17,-LOW(1)
00025f c001      	RJMP _0x2020045
                 _0x2020044:
000260 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
000261 c004      	RJMP _0x2020046
                 _0x2020042:
000262 940e 0358 	CALL SUBOPT_0x4
000264 940e 036e 	CALL SUBOPT_0x7
                 _0x2020046:
                 _0x2020036:
000266 fd00      	SBRC R16,0
000267 c011      	RJMP _0x2020047
                 _0x2020048:
000268 1715      	CP   R17,R21
000269 f478      	BRSH _0x202004A
00026a ff07      	SBRS R16,7
00026b c008      	RJMP _0x202004B
00026c ff02      	SBRS R16,2
00026d c004      	RJMP _0x202004C
00026e 7f0b      	ANDI R16,LOW(251)
00026f 2f24      	MOV  R18,R20
000270 5011      	SUBI R17,LOW(1)
000271 c001      	RJMP _0x202004D
                 _0x202004C:
000272 e320      	LDI  R18,LOW(48)
                 _0x202004D:
000273 c001      	RJMP _0x202004E
                 _0x202004B:
000274 e220      	LDI  R18,LOW(32)
                 _0x202004E:
000275 940e 0351 	CALL SUBOPT_0x3
000277 5051      	SUBI R21,LOW(1)
000278 cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
000279 2f31      	MOV  R19,R17
00027a ff01      	SBRS R16,1
00027b c017      	RJMP _0x202004F
                 _0x2020050:
00027c 3030      	CPI  R19,0
00027d f0a1      	BREQ _0x2020052
00027e ff03      	SBRS R16,3
00027f c006      	RJMP _0x2020053
000280 81ee      	LDD  R30,Y+6
000281 81ff      	LDD  R31,Y+6+1
000282 9125      	LPM  R18,Z+
000283 83ee      	STD  Y+6,R30
000284 83ff      	STD  Y+6+1,R31
000285 c005      	RJMP _0x2020054
                 _0x2020053:
000286 81ae      	LDD  R26,Y+6
000287 81bf      	LDD  R27,Y+6+1
000288 912d      	LD   R18,X+
000289 83ae      	STD  Y+6,R26
00028a 83bf      	STD  Y+6+1,R27
                 _0x2020054:
00028b 940e 0351 	CALL SUBOPT_0x3
00028d 3050      	CPI  R21,0
00028e f009      	BREQ _0x2020055
00028f 5051      	SUBI R21,LOW(1)
                 _0x2020055:
000290 5031      	SUBI R19,LOW(1)
000291 cfea      	RJMP _0x2020050
                 _0x2020052:
000292 c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
000293 e320      	LDI  R18,LOW(48)
000294 81ee      	LDD  R30,Y+6
000295 81ff      	LDD  R31,Y+6+1
000296 940e 03b9 	CALL __GETW1PF
000298 87e8      	STD  Y+8,R30
000299 87f9      	STD  Y+8+1,R31
00029a 81ee      	LDD  R30,Y+6
00029b 81ff      	LDD  R31,Y+6+1
00029c 9632      	ADIW R30,2
00029d 83ee      	STD  Y+6,R30
00029e 83ff      	STD  Y+6+1,R31
                 _0x202005A:
00029f 85e8      	LDD  R30,Y+8
0002a0 85f9      	LDD  R31,Y+8+1
0002a1 85aa      	LDD  R26,Y+10
0002a2 85bb      	LDD  R27,Y+10+1
0002a3 17ae      	CP   R26,R30
0002a4 07bf      	CPC  R27,R31
0002a5 f050      	BRLO _0x202005C
0002a6 5f2f      	SUBI R18,-LOW(1)
0002a7 85a8      	LDD  R26,Y+8
0002a8 85b9      	LDD  R27,Y+8+1
0002a9 85ea      	LDD  R30,Y+10
0002aa 85fb      	LDD  R31,Y+10+1
0002ab 1bea      	SUB  R30,R26
0002ac 0bfb      	SBC  R31,R27
0002ad 87ea      	STD  Y+10,R30
0002ae 87fb      	STD  Y+10+1,R31
0002af cfef      	RJMP _0x202005A
                 _0x202005C:
0002b0 332a      	CPI  R18,58
0002b1 f028      	BRLO _0x202005D
0002b2 ff03      	SBRS R16,3
0002b3 c002      	RJMP _0x202005E
0002b4 5f29      	SUBI R18,-LOW(7)
0002b5 c001      	RJMP _0x202005F
                 _0x202005E:
0002b6 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
0002b7 fd04      	SBRC R16,4
0002b8 c01a      	RJMP _0x2020061
0002b9 3321      	CPI  R18,49
0002ba f420      	BRSH _0x2020063
0002bb 85a8      	LDD  R26,Y+8
0002bc 85b9      	LDD  R27,Y+8+1
0002bd 9711      	SBIW R26,1
0002be f409      	BRNE _0x2020062
                 _0x2020063:
0002bf c009      	RJMP _0x20200CD
                 _0x2020062:
0002c0 1753      	CP   R21,R19
0002c1 f010      	BRLO _0x2020067
0002c2 ff00      	SBRS R16,0
0002c3 c001      	RJMP _0x2020068
                 _0x2020067:
0002c4 c013      	RJMP _0x2020066
                 _0x2020068:
0002c5 e220      	LDI  R18,LOW(32)
0002c6 ff07      	SBRS R16,7
0002c7 c00b      	RJMP _0x2020069
0002c8 e320      	LDI  R18,LOW(48)
                 _0x20200CD:
0002c9 6100      	ORI  R16,LOW(16)
0002ca ff02      	SBRS R16,2
0002cb c007      	RJMP _0x202006A
0002cc 7f0b      	ANDI R16,LOW(251)
0002cd 934a      	ST   -Y,R20
0002ce 940e 035e 	CALL SUBOPT_0x5
0002d0 3050      	CPI  R21,0
0002d1 f009      	BREQ _0x202006B
0002d2 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
0002d3 940e 0351 	CALL SUBOPT_0x3
0002d5 3050      	CPI  R21,0
0002d6 f009      	BREQ _0x202006C
0002d7 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
0002d8 5031      	SUBI R19,LOW(1)
0002d9 85a8      	LDD  R26,Y+8
0002da 85b9      	LDD  R27,Y+8+1
0002db 9712      	SBIW R26,2
0002dc f008      	BRLO _0x2020059
0002dd cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
0002de ff00      	SBRS R16,0
0002df c008      	RJMP _0x202006D
                 _0x202006E:
0002e0 3050      	CPI  R21,0
0002e1 f031      	BREQ _0x2020070
0002e2 5051      	SUBI R21,LOW(1)
0002e3 e2e0      	LDI  R30,LOW(32)
0002e4 93ea      	ST   -Y,R30
0002e5 940e 035e 	CALL SUBOPT_0x5
0002e7 cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
0002e8 e010      	LDI  R17,LOW(0)
                 _0x202001B:
0002e9 cee0      	RJMP _0x2020016
                 _0x2020018:
0002ea 85ac      	LDD  R26,Y+12
0002eb 85bd      	LDD  R27,Y+12+1
0002ec 940e 03b5 	CALL __GETW1P
0002ee 940e 03c9 	CALL __LOADLOCR6
0002f0 9664      	ADIW R28,20
0002f1 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0002f2 92ff      	PUSH R15
0002f3 2ef8      	MOV  R15,R24
0002f4 9726      	SBIW R28,6
0002f5 940e 03c4 	CALL __SAVELOCR4
0002f7 940e 0376 	CALL SUBOPT_0x8
0002f9 9730      	SBIW R30,0
0002fa f419      	BRNE _0x2020072
0002fb efef      	LDI  R30,LOW(65535)
0002fc efff      	LDI  R31,HIGH(65535)
0002fd c023      	RJMP _0x2080001
                 _0x2020072:
0002fe 01de      	MOVW R26,R28
0002ff 9616      	ADIW R26,6
000300 940e 0387 	CALL __ADDW2R15
000302 018d      	MOVW R16,R26
000303 940e 0376 	CALL SUBOPT_0x8
000305 83ee      	STD  Y+6,R30
000306 83ff      	STD  Y+6+1,R31
000307 e0e0      	LDI  R30,LOW(0)
000308 87e8      	STD  Y+8,R30
000309 87e9      	STD  Y+8+1,R30
00030a 01de      	MOVW R26,R28
00030b 961a      	ADIW R26,10
00030c 940e 0387 	CALL __ADDW2R15
00030e 940e 03b5 	CALL __GETW1P
000310 93fa      	ST   -Y,R31
000311 93ea      	ST   -Y,R30
000312 931a      	ST   -Y,R17
000313 930a      	ST   -Y,R16
000314 e7ee      	LDI  R30,LOW(_put_buff_G101)
000315 e0f1      	LDI  R31,HIGH(_put_buff_G101)
000316 93fa      	ST   -Y,R31
000317 93ea      	ST   -Y,R30
000318 01de      	MOVW R26,R28
000319 961a      	ADIW R26,10
00031a dea3      	RCALL __print_G101
00031b 019f      	MOVW R18,R30
00031c 81ae      	LDD  R26,Y+6
00031d 81bf      	LDD  R27,Y+6+1
00031e e0e0      	LDI  R30,LOW(0)
00031f 93ec      	ST   X,R30
000320 01f9      	MOVW R30,R18
                 _0x2080001:
000321 940e 03cb 	CALL __LOADLOCR4
000323 962a      	ADIW R28,10
000324 90ff      	POP  R15
000325 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000326 93ba      	ST   -Y,R27
000327 93aa      	ST   -Y,R26
000328 91a9          ld   r26,y+
000329 91b9          ld   r27,y+
00032a 27ee          clr  r30
00032b 27ff          clr  r31
                 strlen0:
00032c 916d          ld   r22,x+
00032d 2366          tst  r22
00032e f011          breq strlen1
00032f 9631          adiw r30,1
000330 cffb          rjmp strlen0
                 strlen1:
000331 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000332 93ba      	ST   -Y,R27
000333 93aa      	ST   -Y,R26
000334 27aa          clr  r26
000335 27bb          clr  r27
000336 91e9          ld   r30,y+
000337 91f9          ld   r31,y+
                 strlenf0:
000338 9005      	lpm  r0,z+
000339 2000          tst  r0
00033a f011          breq strlenf1
00033b 9611          adiw r26,1
00033c cffb          rjmp strlenf0
                 strlenf1:
00033d 01fd          movw r30,r26
00033e 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _st:
000260           	.BYTE 0x14
                 __base_y_G100:
000274           	.BYTE 0x4
                 __lcd_maxx:
000278           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
00033f 940e 038f 	CALL __CWD1
000341 940e 03bd 	CALL __PUTPARD1
000343 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000344 940e 0103 	CALL __lcd_write_data
000346 e0a3      	LDI  R26,LOW(3)
000347 e0b0      	LDI  R27,0
000348 940c 037d 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
00034a e3a0      	LDI  R26,LOW(48)
00034b 940e 00ef 	CALL __lcd_write_nibble_G100
                +
00034d e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
00034e 958a     +DEC R24
00034f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000350 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x3:
000351 932a      	ST   -Y,R18
000352 85ad      	LDD  R26,Y+13
000353 85be      	LDD  R27,Y+13+1
000354 85ef      	LDD  R30,Y+15
000355 89f8      	LDD  R31,Y+15+1
000356 9509      	ICALL
000357 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x4:
000358 89e8      	LDD  R30,Y+16
000359 89f9      	LDD  R31,Y+16+1
00035a 9734      	SBIW R30,4
00035b 8be8      	STD  Y+16,R30
00035c 8bf9      	STD  Y+16+1,R31
00035d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
00035e 85ad      	LDD  R26,Y+13
00035f 85be      	LDD  R27,Y+13+1
000360 85ef      	LDD  R30,Y+15
000361 89f8      	LDD  R31,Y+15+1
000362 9509      	ICALL
000363 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x6:
000364 89a8      	LDD  R26,Y+16
000365 89b9      	LDD  R27,Y+16+1
000366 9614      	ADIW R26,4
000367 940e 03b5 	CALL __GETW1P
000369 83ee      	STD  Y+6,R30
00036a 83ff      	STD  Y+6+1,R31
00036b 81ae      	LDD  R26,Y+6
00036c 81bf      	LDD  R27,Y+6+1
00036d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x7:
00036e 89a8      	LDD  R26,Y+16
00036f 89b9      	LDD  R27,Y+16+1
000370 9614      	ADIW R26,4
000371 940e 03b5 	CALL __GETW1P
000373 87ea      	STD  Y+10,R30
000374 87fb      	STD  Y+10+1,R31
000375 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
000376 01de      	MOVW R26,R28
000377 961c      	ADIW R26,12
000378 940e 0387 	CALL __ADDW2R15
00037a 940e 03b5 	CALL __GETW1P
00037c 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00037d 9610      	adiw r26,0
00037e f039      	breq __delay_ms1
                 __delay_ms0:
00037f 95a8      	wdr
                +
000380 ef8a     +LDI R24 , LOW ( 0xFA )
000381 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
000382 9701     +SBIW R24 , 1
000383 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
000384 9711      	sbiw r26,1
000385 f7c9      	brne __delay_ms0
                 __delay_ms1:
000386 9508      	ret
                 
                 __ADDW2R15:
000387 2400      	CLR  R0
000388 0daf      	ADD  R26,R15
000389 1db0      	ADC  R27,R0
00038a 9508      	RET
                 
                 __ANEGW1:
00038b 95f1      	NEG  R31
00038c 95e1      	NEG  R30
00038d 40f0      	SBCI R31,0
00038e 9508      	RET
                 
                 __CWD1:
00038f 2f6f      	MOV  R22,R31
000390 0f66      	ADD  R22,R22
000391 0b66      	SBC  R22,R22
000392 2f76      	MOV  R23,R22
000393 9508      	RET
                 
                 __DIVW21U:
000394 2400      	CLR  R0
000395 2411      	CLR  R1
000396 e190      	LDI  R25,16
                 __DIVW21U1:
000397 0faa      	LSL  R26
000398 1fbb      	ROL  R27
000399 1c00      	ROL  R0
00039a 1c11      	ROL  R1
00039b 1a0e      	SUB  R0,R30
00039c 0a1f      	SBC  R1,R31
00039d f418      	BRCC __DIVW21U2
00039e 0e0e      	ADD  R0,R30
00039f 1e1f      	ADC  R1,R31
0003a0 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0003a1 60a1      	SBR  R26,1
                 __DIVW21U3:
0003a2 959a      	DEC  R25
0003a3 f799      	BRNE __DIVW21U1
0003a4 01fd      	MOVW R30,R26
0003a5 01d0      	MOVW R26,R0
0003a6 9508      	RET
                 
                 __MODW21:
0003a7 94e8      	CLT
0003a8 ffb7      	SBRS R27,7
0003a9 c004      	RJMP __MODW211
0003aa 95a0      	COM  R26
0003ab 95b0      	COM  R27
0003ac 9611      	ADIW R26,1
0003ad 9468      	SET
                 __MODW211:
0003ae fdf7      	SBRC R31,7
0003af dfdb      	RCALL __ANEGW1
0003b0 dfe3      	RCALL __DIVW21U
0003b1 01fd      	MOVW R30,R26
0003b2 f40e      	BRTC __MODW212
0003b3 dfd7      	RCALL __ANEGW1
                 __MODW212:
0003b4 9508      	RET
                 
                 __GETW1P:
0003b5 91ed      	LD   R30,X+
0003b6 91fc      	LD   R31,X
0003b7 9711      	SBIW R26,1
0003b8 9508      	RET
                 
                 __GETW1PF:
0003b9 9005      	LPM  R0,Z+
0003ba 91f4      	LPM  R31,Z
0003bb 2de0      	MOV  R30,R0
0003bc 9508      	RET
                 
                 __PUTPARD1:
0003bd 937a      	ST   -Y,R23
0003be 936a      	ST   -Y,R22
0003bf 93fa      	ST   -Y,R31
0003c0 93ea      	ST   -Y,R30
0003c1 9508      	RET
                 
                 __SAVELOCR6:
0003c2 935a      	ST   -Y,R21
                 __SAVELOCR5:
0003c3 934a      	ST   -Y,R20
                 __SAVELOCR4:
0003c4 933a      	ST   -Y,R19
                 __SAVELOCR3:
0003c5 932a      	ST   -Y,R18
                 __SAVELOCR2:
0003c6 931a      	ST   -Y,R17
0003c7 930a      	ST   -Y,R16
0003c8 9508      	RET
                 
                 __LOADLOCR6:
0003c9 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0003ca 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0003cb 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0003cc 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0003cd 8119      	LDD  R17,Y+1
0003ce 8108      	LD   R16,Y
0003cf 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  18 r1 :   7 r2 :   0 r3 :   0 r4 :   5 r5 :   2 r6 :   6 r7 :   2 
r8 :   5 r9 :   2 r10:   5 r11:   2 r12:   4 r13:   4 r14:   0 r15:   4 
r16:  34 r17:  24 r18:  29 r19:   8 r20:   9 r21:  17 r22:  11 r23:   2 
r24:  23 r25:   7 r26: 106 r27:  42 r28:  14 r29:   1 r30: 207 r31:  72 
x  :  23 y  : 180 z  :  15 
Registers used: 32 out of 35 (91.4%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   5 
adiw  :  29 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  17 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   0 brmi  :   1 brne  :  36 brpl  :   1 brsh  :   2 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  54 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  17 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   2 
cp    :   8 cpc   :   6 cpi   :  33 cpse  :   0 dec   :   8 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   3 inc   :   2 jmp   :  23 ld    :  33 ldd   :  76 ldi   : 102 
lds   :   1 lpm   :  14 lsl   :   1 lsr   :   0 mov   :  19 movw  :  30 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   7 out   :  23 pop   :   1 push  :   1 rcall :  20 ret   :  28 
reti  :   1 rjmp  :  61 rol   :   3 ror   :   0 sbc   :   3 sbci  :   2 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :  18 sbr   :   1 sbrc  :   3 
sbrs  :  11 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  66 std   :  31 sts   :   3 sub   :   2 subi  :  16 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 63 out of 116 (54.3%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0007a0   1894     58   1952   32768   6.0%
[.dseg] 0x000060 0x000279      0     25     25    2048   1.2%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 11 warnings
