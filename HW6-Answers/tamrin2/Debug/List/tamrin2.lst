
AVRASM ver. 2.1.30  C:\Users\nima8\Desktop\tamrin2\Debug\List\tamrin2.asm Thu Dec 28 15:32:43 2023

C:\Users\nima8\Desktop\tamrin2\Debug\List\tamrin2.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\nima8\Desktop\tamrin2\Debug\List\tamrin2.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\Users\nima8\Desktop\tamrin2\Debug\List\tamrin2.asm(1090): warning: Register r6 already defined by the .DEF directive
C:\Users\nima8\Desktop\tamrin2\Debug\List\tamrin2.asm(1091): warning: Register r7 already defined by the .DEF directive
C:\Users\nima8\Desktop\tamrin2\Debug\List\tamrin2.asm(1092): warning: Register r8 already defined by the .DEF directive
C:\Users\nima8\Desktop\tamrin2\Debug\List\tamrin2.asm(1093): warning: Register r9 already defined by the .DEF directive
C:\Users\nima8\Desktop\tamrin2\Debug\List\tamrin2.asm(1094): warning: Register r11 already defined by the .DEF directive
C:\Users\nima8\Desktop\tamrin2\Debug\List\tamrin2.asm(1095): warning: Register r10 already defined by the .DEF directive
C:\Users\nima8\Desktop\tamrin2\Debug\List\tamrin2.asm(1096): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _tenth=R4
                 	.DEF _tenth_msb=R5
                 	.DEF _second=R6
                 	.DEF _second_msb=R7
                 	.DEF _m=R8
                 	.DEF _m_msb=R9
                 	.DEF __lcd_x=R11
                 	.DEF __lcd_y=R10
                 	.DEF __lcd_maxx=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0062 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 008f 	JMP  _timer0_comp_isr
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 0000      	.DB  0x0,0x0,0x0,0x0
000035 0000      	.DB  0x0,0x0
                 
                 _0x0:
000036 6f4d
000037 6f74
000038 2072
000039 7369      	.DB  0x4D,0x6F,0x74,0x6F,0x72,0x20,0x69,0x73
00003a 6f20
00003b 006e
00003c 6573
00003d 6f63      	.DB  0x20,0x6F,0x6E,0x0,0x73,0x65,0x63,0x6F
00003e 646e
00003f 253d
000040 0064
000041 6f4d      	.DB  0x6E,0x64,0x3D,0x25,0x64,0x0,0x4D,0x6F
000042 6f74
000043 2072
000044 7369
000045 6f20      	.DB  0x74,0x6F,0x72,0x20,0x69,0x73,0x20,0x6F
000046 6666
C:\Users\nima8\Desktop\tamrin2\Debug\List\tamrin2.asm(1143): warning: .cseg .db misalignment - padding zero byte
000047 0000      	.DB  0x66,0x66,0x0
                 _0x2000003:
000048 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000049 0006      	.DW  0x06
00004a 0004      	.DW  0x04
00004b 0066      	.DW  __REG_VARS*2
                 
00004c 000c      	.DW  0x0C
00004d 0260      	.DW  _0x5
00004e 006c      	.DW  _0x0*2
                 
00004f 000d      	.DW  0x0D
000050 026c      	.DW  _0x5+12
000051 0082      	.DW  _0x0*2+22
                 
000052 000c      	.DW  0x0C
000053 0279      	.DW  _0x5+25
000054 006c      	.DW  _0x0*2
                 
000055 000d      	.DW  0x0D
000056 0285      	.DW  _0x5+37
000057 0082      	.DW  _0x0*2+22
                 
000058 000c      	.DW  0x0C
000059 0292      	.DW  _0x5+50
00005a 006c      	.DW  _0x0*2
                 
00005b 000d      	.DW  0x0D
00005c 029e      	.DW  _0x5+62
00005d 0082      	.DW  _0x0*2+22
                 
00005e 0002      	.DW  0x02
00005f 02bf      	.DW  __base_y_G100
000060 0090      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000061 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000062 94f8      	CLI
000063 27ee      	CLR  R30
000064 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000065 e0f1      	LDI  R31,1
000066 bffb      	OUT  GICR,R31
000067 bfeb      	OUT  GICR,R30
000068 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000069 e08d      	LDI  R24,(14-2)+1
00006a e0a2      	LDI  R26,2
00006b 27bb      	CLR  R27
                 __CLEAR_REG:
00006c 93ed      	ST   X+,R30
00006d 958a      	DEC  R24
00006e f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00006f e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000070 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000071 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000072 93ed      	ST   X+,R30
000073 9701      	SBIW R24,1
000074 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000075 e9e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000076 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000077 9185      	LPM  R24,Z+
000078 9195      	LPM  R25,Z+
000079 9700      	SBIW R24,0
00007a f061      	BREQ __GLOBAL_INI_END
00007b 91a5      	LPM  R26,Z+
00007c 91b5      	LPM  R27,Z+
00007d 9005      	LPM  R0,Z+
00007e 9015      	LPM  R1,Z+
00007f 01bf      	MOVW R22,R30
000080 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000081 9005      	LPM  R0,Z+
000082 920d      	ST   X+,R0
000083 9701      	SBIW R24,1
000084 f7e1      	BRNE __GLOBAL_INI_LOOP
000085 01fb      	MOVW R30,R22
000086 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000087 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000088 bfed      	OUT  SPL,R30
000089 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00008a bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00008b e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00008c e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00008d 940c 0154 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <stdio.h>
                 ;int tenth=0, second=0,m=0;
                 ;char st[20];
                 ;interrupt [TIM0_COMP] void timer0_comp_isr(void)
                 ; 0000 0007 {
                 
                 	.CSEG
                 _timer0_comp_isr:
                 ; .FSTART _timer0_comp_isr
00008f 920a      	ST   -Y,R0
000090 921a      	ST   -Y,R1
000091 92fa      	ST   -Y,R15
000092 936a      	ST   -Y,R22
000093 937a      	ST   -Y,R23
000094 938a      	ST   -Y,R24
000095 939a      	ST   -Y,R25
000096 93aa      	ST   -Y,R26
000097 93ba      	ST   -Y,R27
000098 93ea      	ST   -Y,R30
000099 93fa      	ST   -Y,R31
00009a b7ef      	IN   R30,SREG
00009b 93ea      	ST   -Y,R30
                 ; 0000 0008 tenth++;
00009c 01f2      	MOVW R30,R4
00009d 9631      	ADIW R30,1
00009e 012f      	MOVW R4,R30
                 ; 0000 0009     if (tenth==10)
00009f e0ea      	LDI  R30,LOW(10)
0000a0 e0f0      	LDI  R31,HIGH(10)
0000a1 15e4      	CP   R30,R4
0000a2 05f5      	CPC  R31,R5
0000a3 f009      	BREQ PC+2
0000a4 c0a1      	RJMP _0x3
                 ; 0000 000A     {second++; tenth=0;m++;
0000a5 01f3      	MOVW R30,R6
0000a6 9631      	ADIW R30,1
0000a7 013f      	MOVW R6,R30
0000a8 2444      	CLR  R4
0000a9 2455      	CLR  R5
0000aa 01f4      	MOVW R30,R8
0000ab 9631      	ADIW R30,1
0000ac 014f      	MOVW R8,R30
                 ; 0000 000B     if(m<=10){
0000ad e0ea      	LDI  R30,LOW(10)
0000ae e0f0      	LDI  R31,HIGH(10)
0000af 15e8      	CP   R30,R8
0000b0 05f9      	CPC  R31,R9
0000b1 f044      	BRLT _0x4
                 ; 0000 000C     lcd_clear();
0000b2 d0e8      	RCALL _lcd_clear
                 ; 0000 000D     lcd_puts("Motor is on");
                +
0000b3 e6a0     +LDI R26 , LOW ( _0x5 + ( 0 ) )
0000b4 e0b2     +LDI R27 , HIGH ( _0x5 + ( 0 ) )
                 	__POINTW2MN _0x5,0
0000b5 940e 03bb 	CALL SUBOPT_0x0
                 ; 0000 000E     lcd_gotoxy(0,1);
                 ; 0000 000F     sprintf(st,"second=%d",second);
                 ; 0000 0010     lcd_puts(st);
                 ; 0000 0011     PORTC=PORTC<<1;}
0000b7 b3e5      	IN   R30,0x15
0000b8 0fee      	LSL  R30
0000b9 bbe5      	OUT  0x15,R30
                 ; 0000 0012     if(PORTC>0x08){
                 _0x4:
0000ba b3e5      	IN   R30,0x15
0000bb 30e9      	CPI  R30,LOW(0x9)
0000bc f010      	BRLO _0x6
                 ; 0000 0013     PORTC=0x01;}
0000bd e0e1      	LDI  R30,LOW(1)
0000be bbe5      	OUT  0x15,R30
                 ; 0000 0014     if(m>10 & m<=20){
                 _0x6:
0000bf 01d4      	MOVW R26,R8
0000c0 e0ea      	LDI  R30,LOW(10)
0000c1 e0f0      	LDI  R31,HIGH(10)
0000c2 940e 03d7 	CALL SUBOPT_0x1
0000c4 e1e4      	LDI  R30,LOW(20)
0000c5 e0f0      	LDI  R31,HIGH(20)
0000c6 940e 042c 	CALL __LEW12
0000c8 21e0      	AND  R30,R0
0000c9 f079      	BREQ _0x7
                 ; 0000 0015     if(PORTC==0x04){
0000ca b3e5      	IN   R30,0x15
0000cb 30e4      	CPI  R30,LOW(0x4)
0000cc f411      	BRNE _0x8
                 ; 0000 0016     PORTC=0x04;}
0000cd e0e4      	LDI  R30,LOW(4)
0000ce bbe5      	OUT  0x15,R30
                 ; 0000 0017     if(PORTC==0x01){
                 _0x8:
0000cf b3e5      	IN   R30,0x15
0000d0 30e1      	CPI  R30,LOW(0x1)
0000d1 f411      	BRNE _0x9
                 ; 0000 0018     PORTC=0x01;}
0000d2 e0e1      	LDI  R30,LOW(1)
0000d3 bbe5      	OUT  0x15,R30
                 ; 0000 0019     lcd_clear();
                 _0x9:
0000d4 d0c6      	RCALL _lcd_clear
                 ; 0000 001A     lcd_puts("Motor is off");
                +
0000d5 e6ac     +LDI R26 , LOW ( _0x5 + ( 12 ) )
0000d6 e0b2     +LDI R27 , HIGH ( _0x5 + ( 12 ) )
                 	__POINTW2MN _0x5,12
0000d7 940e 03bb 	CALL SUBOPT_0x0
                 ; 0000 001B     lcd_gotoxy(0,1);
                 ; 0000 001C     sprintf(st,"second=%d",second);
                 ; 0000 001D     lcd_puts(st);}
                 ; 0000 001E     if(m>20 & m<=30){
                 _0x7:
0000d9 01d4      	MOVW R26,R8
0000da e1e4      	LDI  R30,LOW(20)
0000db e0f0      	LDI  R31,HIGH(20)
0000dc 940e 03d7 	CALL SUBOPT_0x1
0000de e1ee      	LDI  R30,LOW(30)
0000df e0f0      	LDI  R31,HIGH(30)
0000e0 940e 042c 	CALL __LEW12
0000e2 21e0      	AND  R30,R0
0000e3 f041      	BREQ _0xA
                 ; 0000 001F     PORTC=PORTC<<1;
0000e4 b3e5      	IN   R30,0x15
0000e5 0fee      	LSL  R30
0000e6 bbe5      	OUT  0x15,R30
                 ; 0000 0020     lcd_clear();
0000e7 d0b3      	RCALL _lcd_clear
                 ; 0000 0021     lcd_puts("Motor is on");
                +
0000e8 e7a9     +LDI R26 , LOW ( _0x5 + ( 25 ) )
0000e9 e0b2     +LDI R27 , HIGH ( _0x5 + ( 25 ) )
                 	__POINTW2MN _0x5,25
0000ea 940e 03bb 	CALL SUBOPT_0x0
                 ; 0000 0022     lcd_gotoxy(0,1);
                 ; 0000 0023     sprintf(st,"second=%d",second);
                 ; 0000 0024     lcd_puts(st);}
                 ; 0000 0025     if(PORTC>0x08){
                 _0xA:
0000ec b3e5      	IN   R30,0x15
0000ed 30e9      	CPI  R30,LOW(0x9)
0000ee f010      	BRLO _0xB
                 ; 0000 0026     PORTC=0x01;}
0000ef e0e1      	LDI  R30,LOW(1)
0000f0 bbe5      	OUT  0x15,R30
                 ; 0000 0027     if(m>30 & m<=40){
                 _0xB:
0000f1 01d4      	MOVW R26,R8
0000f2 e1ee      	LDI  R30,LOW(30)
0000f3 e0f0      	LDI  R31,HIGH(30)
0000f4 940e 03d7 	CALL SUBOPT_0x1
0000f6 e2e8      	LDI  R30,LOW(40)
0000f7 e0f0      	LDI  R31,HIGH(40)
0000f8 940e 042c 	CALL __LEW12
0000fa 21e0      	AND  R30,R0
0000fb f079      	BREQ _0xC
                 ; 0000 0028     if(PORTC==0x04){
0000fc b3e5      	IN   R30,0x15
0000fd 30e4      	CPI  R30,LOW(0x4)
0000fe f411      	BRNE _0xD
                 ; 0000 0029     PORTC=0x04;}
0000ff e0e4      	LDI  R30,LOW(4)
000100 bbe5      	OUT  0x15,R30
                 ; 0000 002A     if(PORTC==0x01){
                 _0xD:
000101 b3e5      	IN   R30,0x15
000102 30e1      	CPI  R30,LOW(0x1)
000103 f411      	BRNE _0xE
                 ; 0000 002B     PORTC=0x01;}
000104 e0e1      	LDI  R30,LOW(1)
000105 bbe5      	OUT  0x15,R30
                 ; 0000 002C     lcd_clear();
                 _0xE:
000106 d094      	RCALL _lcd_clear
                 ; 0000 002D     lcd_puts("Motor is off");
                +
000107 e8a5     +LDI R26 , LOW ( _0x5 + ( 37 ) )
000108 e0b2     +LDI R27 , HIGH ( _0x5 + ( 37 ) )
                 	__POINTW2MN _0x5,37
000109 940e 03bb 	CALL SUBOPT_0x0
                 ; 0000 002E     lcd_gotoxy(0,1);
                 ; 0000 002F     sprintf(st,"second=%d",second);
                 ; 0000 0030     lcd_puts(st);}
                 ; 0000 0031     if(m>40 & m<=50){
                 _0xC:
00010b 01d4      	MOVW R26,R8
00010c e2e8      	LDI  R30,LOW(40)
00010d e0f0      	LDI  R31,HIGH(40)
00010e 940e 03d7 	CALL SUBOPT_0x1
000110 e3e2      	LDI  R30,LOW(50)
000111 e0f0      	LDI  R31,HIGH(50)
000112 940e 042c 	CALL __LEW12
000114 21e0      	AND  R30,R0
000115 f041      	BREQ _0xF
                 ; 0000 0032     PORTC=PORTC<<1;
000116 b3e5      	IN   R30,0x15
000117 0fee      	LSL  R30
000118 bbe5      	OUT  0x15,R30
                 ; 0000 0033     lcd_clear();
000119 d081      	RCALL _lcd_clear
                 ; 0000 0034     lcd_puts("Motor is on");
                +
00011a e9a2     +LDI R26 , LOW ( _0x5 + ( 50 ) )
00011b e0b2     +LDI R27 , HIGH ( _0x5 + ( 50 ) )
                 	__POINTW2MN _0x5,50
00011c 940e 03bb 	CALL SUBOPT_0x0
                 ; 0000 0035     lcd_gotoxy(0,1);
                 ; 0000 0036     sprintf(st,"second=%d",second);
                 ; 0000 0037     lcd_puts(st);}
                 ; 0000 0038     if(PORTC>0x08){
                 _0xF:
00011e b3e5      	IN   R30,0x15
00011f 30e9      	CPI  R30,LOW(0x9)
000120 f010      	BRLO _0x10
                 ; 0000 0039     PORTC=0x01;}
000121 e0e1      	LDI  R30,LOW(1)
000122 bbe5      	OUT  0x15,R30
                 ; 0000 003A     if(m>50 & m<=60){
                 _0x10:
000123 01d4      	MOVW R26,R8
000124 e3e2      	LDI  R30,LOW(50)
000125 e0f0      	LDI  R31,HIGH(50)
000126 940e 03d7 	CALL SUBOPT_0x1
000128 e3ec      	LDI  R30,LOW(60)
000129 e0f0      	LDI  R31,HIGH(60)
00012a 940e 042c 	CALL __LEW12
00012c 21e0      	AND  R30,R0
00012d f079      	BREQ _0x11
                 ; 0000 003B     if(PORTC==0x04){
00012e b3e5      	IN   R30,0x15
00012f 30e4      	CPI  R30,LOW(0x4)
000130 f411      	BRNE _0x12
                 ; 0000 003C     PORTC=0x04;}
000131 e0e4      	LDI  R30,LOW(4)
000132 bbe5      	OUT  0x15,R30
                 ; 0000 003D     if(PORTC==0x01){
                 _0x12:
000133 b3e5      	IN   R30,0x15
000134 30e1      	CPI  R30,LOW(0x1)
000135 f411      	BRNE _0x13
                 ; 0000 003E     PORTC=0x01;}
000136 e0e1      	LDI  R30,LOW(1)
000137 bbe5      	OUT  0x15,R30
                 ; 0000 003F     lcd_clear();
                 _0x13:
000138 d062      	RCALL _lcd_clear
                 ; 0000 0040     lcd_puts("Motor is off");
                +
000139 e9ae     +LDI R26 , LOW ( _0x5 + ( 62 ) )
00013a e0b2     +LDI R27 , HIGH ( _0x5 + ( 62 ) )
                 	__POINTW2MN _0x5,62
00013b 940e 03bb 	CALL SUBOPT_0x0
                 ; 0000 0041     lcd_gotoxy(0,1);
                 ; 0000 0042     sprintf(st,"second=%d",second);
                 ; 0000 0043     lcd_puts(st);}
                 ; 0000 0044        if (second==60)
                 _0x11:
00013d e3ec      	LDI  R30,LOW(60)
00013e e0f0      	LDI  R31,HIGH(60)
00013f 15e6      	CP   R30,R6
000140 05f7      	CPC  R31,R7
000141 f421      	BRNE _0x14
                 ; 0000 0045         {second=0;m=0;
000142 2466      	CLR  R6
000143 2477      	CLR  R7
000144 2488      	CLR  R8
000145 2499      	CLR  R9
                 ; 0000 0046         }
                 ; 0000 0047     }
                 _0x14:
                 ; 0000 0048 
                 ; 0000 0049 }
                 _0x3:
000146 91e9      	LD   R30,Y+
000147 bfef      	OUT  SREG,R30
000148 91f9      	LD   R31,Y+
000149 91e9      	LD   R30,Y+
00014a 91b9      	LD   R27,Y+
00014b 91a9      	LD   R26,Y+
00014c 9199      	LD   R25,Y+
00014d 9189      	LD   R24,Y+
00014e 9179      	LD   R23,Y+
00014f 9169      	LD   R22,Y+
000150 90f9      	LD   R15,Y+
000151 9019      	LD   R1,Y+
000152 9009      	LD   R0,Y+
000153 9518      	RETI
                 ; .FEND
                 
                 	.DSEG
                 _0x5:
000260           	.BYTE 0x4B
                 ;
                 ;void main(void)
                 ; 0000 004C {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 004D // Declare your local variables here
                 ; 0000 004E 
                 ; 0000 004F // Input/Output Ports initialization
                 ; 0000 0050 // Port A initialization
                 ; 0000 0051 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=In Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0052 DDRA=(1<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (0<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
000154 efe7      	LDI  R30,LOW(247)
000155 bbea      	OUT  0x1A,R30
                 ; 0000 0053 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=T Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0054 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000156 e0e0      	LDI  R30,LOW(0)
000157 bbeb      	OUT  0x1B,R30
                 ; 0000 0055 
                 ; 0000 0056 // Port B initialization
                 ; 0000 0057 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0058 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
000158 bbe7      	OUT  0x17,R30
                 ; 0000 0059 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 005A PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000159 bbe8      	OUT  0x18,R30
                 ; 0000 005B 
                 ; 0000 005C // Port C initialization
                 ; 0000 005D // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 005E DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
00015a e0ef      	LDI  R30,LOW(15)
00015b bbe4      	OUT  0x14,R30
                 ; 0000 005F // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=0 Bit2=0 Bit1=0 Bit0=1
                 ; 0000 0060 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (1<<PORTC0);
00015c e0e1      	LDI  R30,LOW(1)
00015d bbe5      	OUT  0x15,R30
                 ; 0000 0061 
                 ; 0000 0062 // Port D initialization
                 ; 0000 0063 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0064 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
00015e e0e0      	LDI  R30,LOW(0)
00015f bbe1      	OUT  0x11,R30
                 ; 0000 0065 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0066 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000160 bbe2      	OUT  0x12,R30
                 ; 0000 0067 
                 ; 0000 0068 // Timer/Counter 0 initialization
                 ; 0000 0069 // Clock source: System Clock
                 ; 0000 006A // Clock value: 0.977 kHz
                 ; 0000 006B // Mode: CTC top=OCR0
                 ; 0000 006C // OC0 output: Disconnected
                 ; 0000 006D // Timer Period: 99.328 ms
                 ; 0000 006E TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (1<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
000161 e0ed      	LDI  R30,LOW(13)
000162 bfe3      	OUT  0x33,R30
                 ; 0000 006F TCNT0=0x00;
000163 e0e0      	LDI  R30,LOW(0)
000164 bfe2      	OUT  0x32,R30
                 ; 0000 0070 OCR0=0x60;
000165 e6e0      	LDI  R30,LOW(96)
000166 bfec      	OUT  0x3C,R30
                 ; 0000 0071 
                 ; 0000 0072 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0073 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (1<<OCIE0) | (0<<TOIE0);
000167 e0e2      	LDI  R30,LOW(2)
000168 bfe9      	OUT  0x39,R30
                 ; 0000 0074 
                 ; 0000 0075 // Alphanumeric LCD initialization
                 ; 0000 0076 // Connections are specified in the
                 ; 0000 0077 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 0078 // RS - PORTA Bit 0
                 ; 0000 0079 // RD - PORTA Bit 1
                 ; 0000 007A // EN - PORTA Bit 2
                 ; 0000 007B // D4 - PORTA Bit 4
                 ; 0000 007C // D5 - PORTA Bit 5
                 ; 0000 007D // D6 - PORTA Bit 6
                 ; 0000 007E // D7 - PORTA Bit 7
                 ; 0000 007F // Characters/line: 16
                 ; 0000 0080 lcd_init(16);
000169 e1a0      	LDI  R26,LOW(16)
00016a d062      	RCALL _lcd_init
                 ; 0000 0081 
                 ; 0000 0082 // Global enable interrupts
                 ; 0000 0083 #asm("sei")
00016b 9478      	sei
                 ; 0000 0084 
                 ; 0000 0085 while (1)
                 _0x15:
                 ; 0000 0086       {
                 ; 0000 0087 //      sprintf(st,"%d:%d:%d:%d",hour,minute,second,tenth);
                 ; 0000 0088 //      lcd_gotoxy(0,1);
                 ; 0000 0089 //      lcd_clear();
                 ; 0000 008A //      lcd_puts(st);
                 ; 0000 008B 
                 ; 0000 008C       }
00016c cfff      	RJMP _0x15
                 ; 0000 008D }
                 _0x18:
00016d cfff      	RJMP _0x18
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
00016e 93aa      	ST   -Y,R26
00016f b3eb      	IN   R30,0x1B
000170 70ef      	ANDI R30,LOW(0xF)
000171 2fae      	MOV  R26,R30
000172 81e8      	LD   R30,Y
000173 7fe0      	ANDI R30,LOW(0xF0)
000174 2bea      	OR   R30,R26
000175 bbeb      	OUT  0x1B,R30
                +
000176 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000177 958a     +DEC R24
000178 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000179 9ada      	SBI  0x1B,2
                +
00017a e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
00017b 958a     +DEC R24
00017c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
00017d 98da      	CBI  0x1B,2
                +
00017e e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
00017f 958a     +DEC R24
000180 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000181 c076      	RJMP _0x2080002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000182 93aa      	ST   -Y,R26
000183 81a8      	LD   R26,Y
000184 dfe9      	RCALL __lcd_write_nibble_G100
000185 81e8          ld    r30,y
000186 95e2          swap  r30
000187 83e8          st    y,r30
000188 81a8      	LD   R26,Y
000189 dfe4      	RCALL __lcd_write_nibble_G100
                +
00018a e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
00018b 958a     +DEC R24
00018c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
00018d c06a      	RJMP _0x2080002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00018e 93aa      	ST   -Y,R26
00018f 81e8      	LD   R30,Y
000190 e0f0      	LDI  R31,0
000191 54e1      	SUBI R30,LOW(-__base_y_G100)
000192 4ffd      	SBCI R31,HIGH(-__base_y_G100)
000193 81e0      	LD   R30,Z
000194 81a9      	LDD  R26,Y+1
000195 0fae      	ADD  R26,R30
000196 dfeb      	RCALL __lcd_write_data
000197 80b9      	LDD  R11,Y+1
000198 80a8      	LDD  R10,Y+0
000199 9622      	ADIW R28,2
00019a 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00019b e0a2      	LDI  R26,LOW(2)
00019c 940e 03dc 	CALL SUBOPT_0x2
00019e e0ac      	LDI  R26,LOW(12)
00019f dfe2      	RCALL __lcd_write_data
0001a0 e0a1      	LDI  R26,LOW(1)
0001a1 940e 03dc 	CALL SUBOPT_0x2
0001a3 e0e0      	LDI  R30,LOW(0)
0001a4 2eae      	MOV  R10,R30
0001a5 2ebe      	MOV  R11,R30
0001a6 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0001a7 93aa      	ST   -Y,R26
0001a8 81a8      	LD   R26,Y
0001a9 30aa      	CPI  R26,LOW(0xA)
0001aa f011      	BREQ _0x2000005
0001ab 14bd      	CP   R11,R13
0001ac f048      	BRLO _0x2000004
                 _0x2000005:
0001ad e0e0      	LDI  R30,LOW(0)
0001ae 93ea      	ST   -Y,R30
0001af 94a3      	INC  R10
0001b0 2daa      	MOV  R26,R10
0001b1 dfdc      	RCALL _lcd_gotoxy
0001b2 81a8      	LD   R26,Y
0001b3 30aa      	CPI  R26,LOW(0xA)
0001b4 f409      	BRNE _0x2000007
0001b5 c042      	RJMP _0x2080002
                 _0x2000007:
                 _0x2000004:
0001b6 94b3      	INC  R11
0001b7 9ad8      	SBI  0x1B,0
0001b8 81a8      	LD   R26,Y
0001b9 dfc8      	RCALL __lcd_write_data
0001ba 98d8      	CBI  0x1B,0
0001bb c03c      	RJMP _0x2080002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0001bc 93ba      	ST   -Y,R27
0001bd 93aa      	ST   -Y,R26
0001be 931a      	ST   -Y,R17
                 _0x2000008:
0001bf 81a9      	LDD  R26,Y+1
0001c0 81ba      	LDD  R27,Y+1+1
0001c1 91ed      	LD   R30,X+
0001c2 83a9      	STD  Y+1,R26
0001c3 83ba      	STD  Y+1+1,R27
0001c4 2f1e      	MOV  R17,R30
0001c5 30e0      	CPI  R30,0
0001c6 f019      	BREQ _0x200000A
0001c7 2fa1      	MOV  R26,R17
0001c8 dfde      	RCALL _lcd_putchar
0001c9 cff5      	RJMP _0x2000008
                 _0x200000A:
0001ca 8118      	LDD  R17,Y+0
0001cb 9623      	ADIW R28,3
0001cc 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0001cd 93aa      	ST   -Y,R26
0001ce b3ea      	IN   R30,0x1A
0001cf 6fe0      	ORI  R30,LOW(0xF0)
0001d0 bbea      	OUT  0x1A,R30
0001d1 9ad2      	SBI  0x1A,2
0001d2 9ad0      	SBI  0x1A,0
0001d3 9ad1      	SBI  0x1A,1
0001d4 98da      	CBI  0x1B,2
0001d5 98d8      	CBI  0x1B,0
0001d6 98d9      	CBI  0x1B,1
0001d7 80d8      	LDD  R13,Y+0
0001d8 81e8      	LD   R30,Y
0001d9 58e0      	SUBI R30,-LOW(128)
                +
0001da 93e0 02c1+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0001dc 81e8      	LD   R30,Y
0001dd 54e0      	SUBI R30,-LOW(192)
                +
0001de 93e0 02c2+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0001e0 e1a4      	LDI  R26,LOW(20)
0001e1 e0b0      	LDI  R27,0
0001e2 940e 0415 	CALL _delay_ms
0001e4 940e 03e2 	CALL SUBOPT_0x3
0001e6 940e 03e2 	CALL SUBOPT_0x3
0001e8 940e 03e2 	CALL SUBOPT_0x3
0001ea e2a0      	LDI  R26,LOW(32)
0001eb df82      	RCALL __lcd_write_nibble_G100
                +
0001ec e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
0001ed 958a     +DEC R24
0001ee f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
0001ef e2a8      	LDI  R26,LOW(40)
0001f0 df91      	RCALL __lcd_write_data
0001f1 e0a4      	LDI  R26,LOW(4)
0001f2 df8f      	RCALL __lcd_write_data
0001f3 e8a5      	LDI  R26,LOW(133)
0001f4 df8d      	RCALL __lcd_write_data
0001f5 e0a6      	LDI  R26,LOW(6)
0001f6 df8b      	RCALL __lcd_write_data
0001f7 dfa3      	RCALL _lcd_clear
                 _0x2080002:
0001f8 9621      	ADIW R28,1
0001f9 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
0001fa 93ba      	ST   -Y,R27
0001fb 93aa      	ST   -Y,R26
0001fc 931a      	ST   -Y,R17
0001fd 930a      	ST   -Y,R16
0001fe 81aa      	LDD  R26,Y+2
0001ff 81bb      	LDD  R27,Y+2+1
000200 9612      	ADIW R26,2
000201 940e 0438 	CALL __GETW1P
000203 9730      	SBIW R30,0
000204 f159      	BREQ _0x2020010
000205 81aa      	LDD  R26,Y+2
000206 81bb      	LDD  R27,Y+2+1
000207 9614      	ADIW R26,4
000208 940e 0438 	CALL __GETW1P
00020a 018f      	MOVW R16,R30
00020b 9730      	SBIW R30,0
00020c f061      	BREQ _0x2020012
                +
00020d 3002     +CPI R16 , LOW ( 2 )
00020e e0e0     +LDI R30 , HIGH ( 2 )
00020f 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000210 f098      	BRLO _0x2020013
000211 01f8      	MOVW R30,R16
000212 9731      	SBIW R30,1
000213 018f      	MOVW R16,R30
                +
000214 81aa     +LDD R26 , Y + 2
000215 81bb     +LDD R27 , Y + 2 + 1
000216 9614     +ADIW R26 , 4
000217 93ed     +ST X + , R30
000218 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
000219 81aa      	LDD  R26,Y+2
00021a 81bb      	LDD  R27,Y+2+1
00021b 9612      	ADIW R26,2
00021c 91ed      	LD   R30,X+
00021d 91fd      	LD   R31,X+
00021e 9631      	ADIW R30,1
00021f 93fe      	ST   -X,R31
000220 93ee      	ST   -X,R30
000221 9731      	SBIW R30,1
000222 81ac      	LDD  R26,Y+4
000223 83a0      	STD  Z+0,R26
                 _0x2020013:
000224 81aa      	LDD  R26,Y+2
000225 81bb      	LDD  R27,Y+2+1
000226 940e 0438 	CALL __GETW1P
000228 23ff      	TST  R31
000229 f02a      	BRMI _0x2020014
00022a 91ed      	LD   R30,X+
00022b 91fd      	LD   R31,X+
00022c 9631      	ADIW R30,1
00022d 93fe      	ST   -X,R31
00022e 93ee      	ST   -X,R30
                 _0x2020014:
00022f c006      	RJMP _0x2020015
                 _0x2020010:
000230 81aa      	LDD  R26,Y+2
000231 81bb      	LDD  R27,Y+2+1
000232 efef      	LDI  R30,LOW(65535)
000233 efff      	LDI  R31,HIGH(65535)
000234 93ed      	ST   X+,R30
000235 93fc      	ST   X,R31
                 _0x2020015:
000236 8119      	LDD  R17,Y+1
000237 8108      	LDD  R16,Y+0
000238 9625      	ADIW R28,5
000239 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
00023a 93ba      	ST   -Y,R27
00023b 93aa      	ST   -Y,R26
00023c 9726      	SBIW R28,6
00023d 940e 0445 	CALL __SAVELOCR6
00023f e010      	LDI  R17,0
000240 85ac      	LDD  R26,Y+12
000241 85bd      	LDD  R27,Y+12+1
000242 e0e0      	LDI  R30,LOW(0)
000243 e0f0      	LDI  R31,HIGH(0)
000244 93ed      	ST   X+,R30
000245 93fc      	ST   X,R31
                 _0x2020016:
000246 89ea      	LDD  R30,Y+18
000247 89fb      	LDD  R31,Y+18+1
000248 9631      	ADIW R30,1
000249 8bea      	STD  Y+18,R30
00024a 8bfb      	STD  Y+18+1,R31
00024b 9731      	SBIW R30,1
00024c 91e4      	LPM  R30,Z
00024d 2f2e      	MOV  R18,R30
00024e 30e0      	CPI  R30,0
00024f f409      	BRNE PC+2
000250 c115      	RJMP _0x2020018
000251 2fe1      	MOV  R30,R17
000252 30e0      	CPI  R30,0
000253 f439      	BRNE _0x202001C
000254 3225      	CPI  R18,37
000255 f411      	BRNE _0x202001D
000256 e011      	LDI  R17,LOW(1)
000257 c002      	RJMP _0x202001E
                 _0x202001D:
000258 940e 03e9 	CALL SUBOPT_0x4
                 _0x202001E:
00025a c10a      	RJMP _0x202001B
                 _0x202001C:
00025b 30e1      	CPI  R30,LOW(0x1)
00025c f4a9      	BRNE _0x202001F
00025d 3225      	CPI  R18,37
00025e f419      	BRNE _0x2020020
00025f 940e 03e9 	CALL SUBOPT_0x4
000261 c102      	RJMP _0x20200CC
                 _0x2020020:
000262 e012      	LDI  R17,LOW(2)
000263 e040      	LDI  R20,LOW(0)
000264 e000      	LDI  R16,LOW(0)
000265 322d      	CPI  R18,45
000266 f411      	BRNE _0x2020021
000267 e001      	LDI  R16,LOW(1)
000268 c0fc      	RJMP _0x202001B
                 _0x2020021:
000269 322b      	CPI  R18,43
00026a f411      	BRNE _0x2020022
00026b e24b      	LDI  R20,LOW(43)
00026c c0f8      	RJMP _0x202001B
                 _0x2020022:
00026d 3220      	CPI  R18,32
00026e f411      	BRNE _0x2020023
00026f e240      	LDI  R20,LOW(32)
000270 c0f4      	RJMP _0x202001B
                 _0x2020023:
000271 c002      	RJMP _0x2020024
                 _0x202001F:
000272 30e2      	CPI  R30,LOW(0x2)
000273 f439      	BRNE _0x2020025
                 _0x2020024:
000274 e050      	LDI  R21,LOW(0)
000275 e013      	LDI  R17,LOW(3)
000276 3320      	CPI  R18,48
000277 f411      	BRNE _0x2020026
000278 6800      	ORI  R16,LOW(128)
000279 c0eb      	RJMP _0x202001B
                 _0x2020026:
00027a c003      	RJMP _0x2020027
                 _0x2020025:
00027b 30e3      	CPI  R30,LOW(0x3)
00027c f009      	BREQ PC+2
00027d c0e7      	RJMP _0x202001B
                 _0x2020027:
00027e 3320      	CPI  R18,48
00027f f010      	BRLO _0x202002A
000280 332a      	CPI  R18,58
000281 f008      	BRLO _0x202002B
                 _0x202002A:
000282 c007      	RJMP _0x2020029
                 _0x202002B:
000283 e0aa      	LDI  R26,LOW(10)
000284 9f5a      	MUL  R21,R26
000285 2d50      	MOV  R21,R0
000286 2fe2      	MOV  R30,R18
000287 53e0      	SUBI R30,LOW(48)
000288 0f5e      	ADD  R21,R30
000289 c0db      	RJMP _0x202001B
                 _0x2020029:
00028a 2fe2      	MOV  R30,R18
00028b 36e3      	CPI  R30,LOW(0x63)
00028c f449      	BRNE _0x202002F
00028d 940e 03f0 	CALL SUBOPT_0x5
00028f 89e8      	LDD  R30,Y+16
000290 89f9      	LDD  R31,Y+16+1
000291 81a4      	LDD  R26,Z+4
000292 93aa      	ST   -Y,R26
000293 940e 03f6 	CALL SUBOPT_0x6
000295 c0ce      	RJMP _0x2020030
                 _0x202002F:
000296 37e3      	CPI  R30,LOW(0x73)
000297 f441      	BRNE _0x2020032
000298 940e 03f0 	CALL SUBOPT_0x5
00029a 940e 03fc 	CALL SUBOPT_0x7
00029c 940e 03a2 	CALL _strlen
00029e 2f1e      	MOV  R17,R30
00029f c00a      	RJMP _0x2020033
                 _0x2020032:
0002a0 37e0      	CPI  R30,LOW(0x70)
0002a1 f461      	BRNE _0x2020035
0002a2 940e 03f0 	CALL SUBOPT_0x5
0002a4 940e 03fc 	CALL SUBOPT_0x7
0002a6 940e 03ae 	CALL _strlenf
0002a8 2f1e      	MOV  R17,R30
0002a9 6008      	ORI  R16,LOW(8)
                 _0x2020033:
0002aa 6002      	ORI  R16,LOW(2)
0002ab 770f      	ANDI R16,LOW(127)
0002ac e030      	LDI  R19,LOW(0)
0002ad c034      	RJMP _0x2020036
                 _0x2020035:
0002ae 36e4      	CPI  R30,LOW(0x64)
0002af f011      	BREQ _0x2020039
0002b0 36e9      	CPI  R30,LOW(0x69)
0002b1 f411      	BRNE _0x202003A
                 _0x2020039:
0002b2 6004      	ORI  R16,LOW(4)
0002b3 c002      	RJMP _0x202003B
                 _0x202003A:
0002b4 37e5      	CPI  R30,LOW(0x75)
0002b5 f431      	BRNE _0x202003C
                 _0x202003B:
0002b6 e5e4      	LDI  R30,LOW(_tbl10_G101*2)
0002b7 e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
0002b8 83ee      	STD  Y+6,R30
0002b9 83ff      	STD  Y+6+1,R31
0002ba e015      	LDI  R17,LOW(5)
0002bb c00c      	RJMP _0x202003D
                 _0x202003C:
0002bc 35e8      	CPI  R30,LOW(0x58)
0002bd f411      	BRNE _0x202003F
0002be 6008      	ORI  R16,LOW(8)
0002bf c003      	RJMP _0x2020040
                 _0x202003F:
0002c0 37e8      	CPI  R30,LOW(0x78)
0002c1 f009      	BREQ PC+2
0002c2 c0a1      	RJMP _0x2020071
                 _0x2020040:
0002c3 e5ee      	LDI  R30,LOW(_tbl16_G101*2)
0002c4 e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
0002c5 83ee      	STD  Y+6,R30
0002c6 83ff      	STD  Y+6+1,R31
0002c7 e014      	LDI  R17,LOW(4)
                 _0x202003D:
0002c8 ff02      	SBRS R16,2
0002c9 c014      	RJMP _0x2020042
0002ca 940e 03f0 	CALL SUBOPT_0x5
0002cc 940e 0406 	CALL SUBOPT_0x8
0002ce 85ab      	LDD  R26,Y+11
0002cf 23aa      	TST  R26
0002d0 f43a      	BRPL _0x2020043
0002d1 85ea      	LDD  R30,Y+10
0002d2 85fb      	LDD  R31,Y+10+1
0002d3 940e 0423 	CALL __ANEGW1
0002d5 87ea      	STD  Y+10,R30
0002d6 87fb      	STD  Y+10+1,R31
0002d7 e24d      	LDI  R20,LOW(45)
                 _0x2020043:
0002d8 3040      	CPI  R20,0
0002d9 f011      	BREQ _0x2020044
0002da 5f1f      	SUBI R17,-LOW(1)
0002db c001      	RJMP _0x2020045
                 _0x2020044:
0002dc 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
0002dd c004      	RJMP _0x2020046
                 _0x2020042:
0002de 940e 03f0 	CALL SUBOPT_0x5
0002e0 940e 0406 	CALL SUBOPT_0x8
                 _0x2020046:
                 _0x2020036:
0002e2 fd00      	SBRC R16,0
0002e3 c011      	RJMP _0x2020047
                 _0x2020048:
0002e4 1715      	CP   R17,R21
0002e5 f478      	BRSH _0x202004A
0002e6 ff07      	SBRS R16,7
0002e7 c008      	RJMP _0x202004B
0002e8 ff02      	SBRS R16,2
0002e9 c004      	RJMP _0x202004C
0002ea 7f0b      	ANDI R16,LOW(251)
0002eb 2f24      	MOV  R18,R20
0002ec 5011      	SUBI R17,LOW(1)
0002ed c001      	RJMP _0x202004D
                 _0x202004C:
0002ee e320      	LDI  R18,LOW(48)
                 _0x202004D:
0002ef c001      	RJMP _0x202004E
                 _0x202004B:
0002f0 e220      	LDI  R18,LOW(32)
                 _0x202004E:
0002f1 940e 03e9 	CALL SUBOPT_0x4
0002f3 5051      	SUBI R21,LOW(1)
0002f4 cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
0002f5 2f31      	MOV  R19,R17
0002f6 ff01      	SBRS R16,1
0002f7 c017      	RJMP _0x202004F
                 _0x2020050:
0002f8 3030      	CPI  R19,0
0002f9 f0a1      	BREQ _0x2020052
0002fa ff03      	SBRS R16,3
0002fb c006      	RJMP _0x2020053
0002fc 81ee      	LDD  R30,Y+6
0002fd 81ff      	LDD  R31,Y+6+1
0002fe 9125      	LPM  R18,Z+
0002ff 83ee      	STD  Y+6,R30
000300 83ff      	STD  Y+6+1,R31
000301 c005      	RJMP _0x2020054
                 _0x2020053:
000302 81ae      	LDD  R26,Y+6
000303 81bf      	LDD  R27,Y+6+1
000304 912d      	LD   R18,X+
000305 83ae      	STD  Y+6,R26
000306 83bf      	STD  Y+6+1,R27
                 _0x2020054:
000307 940e 03e9 	CALL SUBOPT_0x4
000309 3050      	CPI  R21,0
00030a f009      	BREQ _0x2020055
00030b 5051      	SUBI R21,LOW(1)
                 _0x2020055:
00030c 5031      	SUBI R19,LOW(1)
00030d cfea      	RJMP _0x2020050
                 _0x2020052:
00030e c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
00030f e320      	LDI  R18,LOW(48)
000310 81ee      	LDD  R30,Y+6
000311 81ff      	LDD  R31,Y+6+1
000312 940e 043c 	CALL __GETW1PF
000314 87e8      	STD  Y+8,R30
000315 87f9      	STD  Y+8+1,R31
000316 81ee      	LDD  R30,Y+6
000317 81ff      	LDD  R31,Y+6+1
000318 9632      	ADIW R30,2
000319 83ee      	STD  Y+6,R30
00031a 83ff      	STD  Y+6+1,R31
                 _0x202005A:
00031b 85e8      	LDD  R30,Y+8
00031c 85f9      	LDD  R31,Y+8+1
00031d 85aa      	LDD  R26,Y+10
00031e 85bb      	LDD  R27,Y+10+1
00031f 17ae      	CP   R26,R30
000320 07bf      	CPC  R27,R31
000321 f050      	BRLO _0x202005C
000322 5f2f      	SUBI R18,-LOW(1)
000323 85a8      	LDD  R26,Y+8
000324 85b9      	LDD  R27,Y+8+1
000325 85ea      	LDD  R30,Y+10
000326 85fb      	LDD  R31,Y+10+1
000327 1bea      	SUB  R30,R26
000328 0bfb      	SBC  R31,R27
000329 87ea      	STD  Y+10,R30
00032a 87fb      	STD  Y+10+1,R31
00032b cfef      	RJMP _0x202005A
                 _0x202005C:
00032c 332a      	CPI  R18,58
00032d f028      	BRLO _0x202005D
00032e ff03      	SBRS R16,3
00032f c002      	RJMP _0x202005E
000330 5f29      	SUBI R18,-LOW(7)
000331 c001      	RJMP _0x202005F
                 _0x202005E:
000332 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
000333 fd04      	SBRC R16,4
000334 c01a      	RJMP _0x2020061
000335 3321      	CPI  R18,49
000336 f420      	BRSH _0x2020063
000337 85a8      	LDD  R26,Y+8
000338 85b9      	LDD  R27,Y+8+1
000339 9711      	SBIW R26,1
00033a f409      	BRNE _0x2020062
                 _0x2020063:
00033b c009      	RJMP _0x20200CD
                 _0x2020062:
00033c 1753      	CP   R21,R19
00033d f010      	BRLO _0x2020067
00033e ff00      	SBRS R16,0
00033f c001      	RJMP _0x2020068
                 _0x2020067:
000340 c013      	RJMP _0x2020066
                 _0x2020068:
000341 e220      	LDI  R18,LOW(32)
000342 ff07      	SBRS R16,7
000343 c00b      	RJMP _0x2020069
000344 e320      	LDI  R18,LOW(48)
                 _0x20200CD:
000345 6100      	ORI  R16,LOW(16)
000346 ff02      	SBRS R16,2
000347 c007      	RJMP _0x202006A
000348 7f0b      	ANDI R16,LOW(251)
000349 934a      	ST   -Y,R20
00034a 940e 03f6 	CALL SUBOPT_0x6
00034c 3050      	CPI  R21,0
00034d f009      	BREQ _0x202006B
00034e 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
00034f 940e 03e9 	CALL SUBOPT_0x4
000351 3050      	CPI  R21,0
000352 f009      	BREQ _0x202006C
000353 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
000354 5031      	SUBI R19,LOW(1)
000355 85a8      	LDD  R26,Y+8
000356 85b9      	LDD  R27,Y+8+1
000357 9712      	SBIW R26,2
000358 f008      	BRLO _0x2020059
000359 cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
00035a ff00      	SBRS R16,0
00035b c008      	RJMP _0x202006D
                 _0x202006E:
00035c 3050      	CPI  R21,0
00035d f031      	BREQ _0x2020070
00035e 5051      	SUBI R21,LOW(1)
00035f e2e0      	LDI  R30,LOW(32)
000360 93ea      	ST   -Y,R30
000361 940e 03f6 	CALL SUBOPT_0x6
000363 cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
000364 e010      	LDI  R17,LOW(0)
                 _0x202001B:
000365 cee0      	RJMP _0x2020016
                 _0x2020018:
000366 85ac      	LDD  R26,Y+12
000367 85bd      	LDD  R27,Y+12+1
000368 940e 0438 	CALL __GETW1P
00036a 940e 044c 	CALL __LOADLOCR6
00036c 9664      	ADIW R28,20
00036d 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
00036e 92ff      	PUSH R15
00036f 2ef8      	MOV  R15,R24
000370 9726      	SBIW R28,6
000371 940e 0447 	CALL __SAVELOCR4
000373 940e 040e 	CALL SUBOPT_0x9
000375 9730      	SBIW R30,0
000376 f419      	BRNE _0x2020072
000377 efef      	LDI  R30,LOW(65535)
000378 efff      	LDI  R31,HIGH(65535)
000379 c023      	RJMP _0x2080001
                 _0x2020072:
00037a 01de      	MOVW R26,R28
00037b 9616      	ADIW R26,6
00037c 940e 041f 	CALL __ADDW2R15
00037e 018d      	MOVW R16,R26
00037f 940e 040e 	CALL SUBOPT_0x9
000381 83ee      	STD  Y+6,R30
000382 83ff      	STD  Y+6+1,R31
000383 e0e0      	LDI  R30,LOW(0)
000384 87e8      	STD  Y+8,R30
000385 87e9      	STD  Y+8+1,R30
000386 01de      	MOVW R26,R28
000387 961a      	ADIW R26,10
000388 940e 041f 	CALL __ADDW2R15
00038a 940e 0438 	CALL __GETW1P
00038c 93fa      	ST   -Y,R31
00038d 93ea      	ST   -Y,R30
00038e 931a      	ST   -Y,R17
00038f 930a      	ST   -Y,R16
000390 efea      	LDI  R30,LOW(_put_buff_G101)
000391 e0f1      	LDI  R31,HIGH(_put_buff_G101)
000392 93fa      	ST   -Y,R31
000393 93ea      	ST   -Y,R30
000394 01de      	MOVW R26,R28
000395 961a      	ADIW R26,10
000396 dea3      	RCALL __print_G101
000397 019f      	MOVW R18,R30
000398 81ae      	LDD  R26,Y+6
000399 81bf      	LDD  R27,Y+6+1
00039a e0e0      	LDI  R30,LOW(0)
00039b 93ec      	ST   X,R30
00039c 01f9      	MOVW R30,R18
                 _0x2080001:
00039d 940e 044e 	CALL __LOADLOCR4
00039f 962a      	ADIW R28,10
0003a0 90ff      	POP  R15
0003a1 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0003a2 93ba      	ST   -Y,R27
0003a3 93aa      	ST   -Y,R26
0003a4 91a9          ld   r26,y+
0003a5 91b9          ld   r27,y+
0003a6 27ee          clr  r30
0003a7 27ff          clr  r31
                 strlen0:
0003a8 916d          ld   r22,x+
0003a9 2366          tst  r22
0003aa f011          breq strlen1
0003ab 9631          adiw r30,1
0003ac cffb          rjmp strlen0
                 strlen1:
0003ad 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0003ae 93ba      	ST   -Y,R27
0003af 93aa      	ST   -Y,R26
0003b0 27aa          clr  r26
0003b1 27bb          clr  r27
0003b2 91e9          ld   r30,y+
0003b3 91f9          ld   r31,y+
                 strlenf0:
0003b4 9005      	lpm  r0,z+
0003b5 2000          tst  r0
0003b6 f011          breq strlenf1
0003b7 9611          adiw r26,1
0003b8 cffb          rjmp strlenf0
                 strlenf1:
0003b9 01fd          movw r30,r26
0003ba 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _st:
0002ab           	.BYTE 0x14
                 __base_y_G100:
0002bf           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:127 WORDS
                 SUBOPT_0x0:
0003bb 940e 01bc 	CALL _lcd_puts
0003bd e0e0      	LDI  R30,LOW(0)
0003be 93ea      	ST   -Y,R30
0003bf e0a1      	LDI  R26,LOW(1)
0003c0 940e 018e 	CALL _lcd_gotoxy
0003c2 eaeb      	LDI  R30,LOW(_st)
0003c3 e0f2      	LDI  R31,HIGH(_st)
0003c4 93fa      	ST   -Y,R31
0003c5 93ea      	ST   -Y,R30
                +
0003c6 e7e8     +LDI R30 , LOW ( 2 * _0x0 + ( 12 ) )
0003c7 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 12 ) )
                 	__POINTW1FN _0x0,12
0003c8 93fa      	ST   -Y,R31
0003c9 93ea      	ST   -Y,R30
0003ca 01f3      	MOVW R30,R6
0003cb 940e 0427 	CALL __CWD1
0003cd 940e 0440 	CALL __PUTPARD1
0003cf e084      	LDI  R24,4
0003d0 940e 036e 	CALL _sprintf
0003d2 9628      	ADIW R28,8
0003d3 eaab      	LDI  R26,LOW(_st)
0003d4 e0b2      	LDI  R27,HIGH(_st)
0003d5 940c 01bc 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
0003d7 940e 0432 	CALL __GTW12
0003d9 2e0e      	MOV  R0,R30
0003da 01d4      	MOVW R26,R8
0003db 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
0003dc 940e 0182 	CALL __lcd_write_data
0003de e0a3      	LDI  R26,LOW(3)
0003df e0b0      	LDI  R27,0
0003e0 940c 0415 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
0003e2 e3a0      	LDI  R26,LOW(48)
0003e3 940e 016e 	CALL __lcd_write_nibble_G100
                +
0003e5 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
0003e6 958a     +DEC R24
0003e7 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
0003e8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x4:
0003e9 932a      	ST   -Y,R18
0003ea 85ad      	LDD  R26,Y+13
0003eb 85be      	LDD  R27,Y+13+1
0003ec 85ef      	LDD  R30,Y+15
0003ed 89f8      	LDD  R31,Y+15+1
0003ee 9509      	ICALL
0003ef 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5:
0003f0 89e8      	LDD  R30,Y+16
0003f1 89f9      	LDD  R31,Y+16+1
0003f2 9734      	SBIW R30,4
0003f3 8be8      	STD  Y+16,R30
0003f4 8bf9      	STD  Y+16+1,R31
0003f5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
0003f6 85ad      	LDD  R26,Y+13
0003f7 85be      	LDD  R27,Y+13+1
0003f8 85ef      	LDD  R30,Y+15
0003f9 89f8      	LDD  R31,Y+15+1
0003fa 9509      	ICALL
0003fb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x7:
0003fc 89a8      	LDD  R26,Y+16
0003fd 89b9      	LDD  R27,Y+16+1
0003fe 9614      	ADIW R26,4
0003ff 940e 0438 	CALL __GETW1P
000401 83ee      	STD  Y+6,R30
000402 83ff      	STD  Y+6+1,R31
000403 81ae      	LDD  R26,Y+6
000404 81bf      	LDD  R27,Y+6+1
000405 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x8:
000406 89a8      	LDD  R26,Y+16
000407 89b9      	LDD  R27,Y+16+1
000408 9614      	ADIW R26,4
000409 940e 0438 	CALL __GETW1P
00040b 87ea      	STD  Y+10,R30
00040c 87fb      	STD  Y+10+1,R31
00040d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
00040e 01de      	MOVW R26,R28
00040f 961c      	ADIW R26,12
000410 940e 041f 	CALL __ADDW2R15
000412 940e 0438 	CALL __GETW1P
000414 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000415 9610      	adiw r26,0
000416 f039      	breq __delay_ms1
                 __delay_ms0:
000417 95a8      	wdr
                +
000418 ef8a     +LDI R24 , LOW ( 0xFA )
000419 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
00041a 9701     +SBIW R24 , 1
00041b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
00041c 9711      	sbiw r26,1
00041d f7c9      	brne __delay_ms0
                 __delay_ms1:
00041e 9508      	ret
                 
                 __ADDW2R15:
00041f 2400      	CLR  R0
000420 0daf      	ADD  R26,R15
000421 1db0      	ADC  R27,R0
000422 9508      	RET
                 
                 __ANEGW1:
000423 95f1      	NEG  R31
000424 95e1      	NEG  R30
000425 40f0      	SBCI R31,0
000426 9508      	RET
                 
                 __CWD1:
000427 2f6f      	MOV  R22,R31
000428 0f66      	ADD  R22,R22
000429 0b66      	SBC  R22,R22
00042a 2f76      	MOV  R23,R22
00042b 9508      	RET
                 
                 __LEW12:
00042c 17ea      	CP   R30,R26
00042d 07fb      	CPC  R31,R27
00042e e0e1      	LDI  R30,1
00042f f40c      	BRGE __LEW12T
000430 27ee      	CLR  R30
                 __LEW12T:
000431 9508      	RET
                 
                 __GTW12:
000432 17ea      	CP   R30,R26
000433 07fb      	CPC  R31,R27
000434 e0e1      	LDI  R30,1
000435 f00c      	BRLT __GTW12T
000436 27ee      	CLR  R30
                 __GTW12T:
000437 9508      	RET
                 
                 __GETW1P:
000438 91ed      	LD   R30,X+
000439 91fc      	LD   R31,X
00043a 9711      	SBIW R26,1
00043b 9508      	RET
                 
                 __GETW1PF:
00043c 9005      	LPM  R0,Z+
00043d 91f4      	LPM  R31,Z
00043e 2de0      	MOV  R30,R0
00043f 9508      	RET
                 
                 __PUTPARD1:
000440 937a      	ST   -Y,R23
000441 936a      	ST   -Y,R22
000442 93fa      	ST   -Y,R31
000443 93ea      	ST   -Y,R30
000444 9508      	RET
                 
                 __SAVELOCR6:
000445 935a      	ST   -Y,R21
                 __SAVELOCR5:
000446 934a      	ST   -Y,R20
                 __SAVELOCR4:
000447 933a      	ST   -Y,R19
                 __SAVELOCR3:
000448 932a      	ST   -Y,R18
                 __SAVELOCR2:
000449 931a      	ST   -Y,R17
00044a 930a      	ST   -Y,R16
00044b 9508      	RET
                 
                 __LOADLOCR6:
00044c 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00044d 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00044e 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00044f 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000450 8119      	LDD  R17,Y+1
000451 8108      	LD   R16,Y
000452 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  19 r1 :   3 r2 :   0 r3 :   0 r4 :   4 r5 :   2 r6 :   5 r7 :   2 
r8 :  10 r9 :   2 r10:   4 r11:   4 r12:   0 r13:   2 r14:   0 r15:   6 
r16:  34 r17:  24 r18:  29 r19:   8 r20:   9 r21:  17 r22:  13 r23:   4 
r24:  25 r25:   5 r26: 113 r27:  47 r28:  14 r29:   1 r30: 256 r31:  78 
x  :  23 y  : 190 z  :  15 
Registers used: 31 out of 35 (88.6%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   4 
adiw  :  27 and   :   5 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  23 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  11 
brlt  :   2 brmi  :   1 brne  :  37 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  68 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  15 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   9 cpc   :   7 cpi   :  42 cpse  :   0 dec   :   7 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :  15 inc   :   2 jmp   :  24 ld    :  37 ldd   :  77 ldi   : 141 
lds   :   0 lpm   :  14 lsl   :   3 lsr   :   0 mov   :  20 movw  :  27 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   7 out   :  33 pop   :   1 push  :   1 rcall :  21 ret   :  28 
reti  :   1 rjmp  :  60 rol   :   0 ror   :   0 sbc   :   2 sbci  :   2 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :  17 sbr   :   0 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  71 std   :  31 sts   :   2 sub   :   1 subi  :  16 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 58 out of 116 (50.0%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0008a6   2102    112   2214   32768   6.8%
[.dseg] 0x000060 0x0002c3      0     99     99    2048   4.8%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 10 warnings
